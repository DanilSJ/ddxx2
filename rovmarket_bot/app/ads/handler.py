from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InputMediaPhoto,
)
from html import escape

from aiogram.utils.keyboard import InlineKeyboardBuilder

from rovmarket_bot.app.ads.keyboard import (
    contact,
    menu_price_negotiable_edit,
    menu_skip,
)
from rovmarket_bot.app.start.keyboard import menu_start
from rovmarket_bot.core.cache import check_rate_limit, invalidate_all_ads_cache
from rovmarket_bot.core.models import db_helper
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from rovmarket_bot.app.ads.crud import (
    get_user_products_paginated,
    get_user_products_count,
    unpublish_user_product,
    publish_user_product,
    get_user_product_with_photos,
    get_user_product_by_id,
    update_user_product,
)
from rovmarket_bot.app.settings.crud import get_or_create_bot_settings
from rovmarket_bot.app.admin.crud import get_admin_users
from rovmarket_bot.core.logger import get_component_logger
from aiogram.exceptions import TelegramBadRequest
import re


router = Router()
logger = get_component_logger("ads")


class UserAdsState(StatesGroup):
    viewing_ads = State()


class EditProductState(StatesGroup):
    waiting_name = State()
    waiting_description = State()
    waiting_price = State()
    waiting_contact = State()


CONTACT_REGEX = r"^(?:\+7\d{10}|\+380\d{9}|\+8\d{10}|@[\w\d_]{5,32}|[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)$"


async def clean_phone(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return (
        "+" + re.sub(r"[^\d]", "", text) if "+" in text else re.sub(r"[^\d]", "", text)
    )


@router.message(Command("my_ads"))
async def cmd_my_ads(message: Message, state: FSMContext):
    logger.info("/my_ads requested by user_id=%s", message.from_user.id)
    allowed, retry_after = await check_rate_limit(message.from_user.id, "search_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await state.clear()
    await button_my_ads(message, state)


@router.message(F.text == "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def button_my_ads(message: Message, state: FSMContext):
    allowed, retry_after = await check_rate_limit(message.from_user.id, "search_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await state.clear()

    async with db_helper.session_factory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        products = await get_user_products_paginated(
            telegram_id=message.from_user.id, session=session, page=1, limit=5
        )

        total_count = await get_user_products_count(
            telegram_id=message.from_user.id, session=session
        )
        logger.info(
            "Loaded %s ads for user_id=%s (first page)",
            total_count,
            message.from_user.id,
        )

    if not products:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_page=1, total_count=total_count)
    await state.set_state(UserAdsState.viewing_ads)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await send_user_products(message, products, 1, total_count)


async def send_user_products(
    message: Message, products, current_page: int, total_count: int
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""

    for product in products:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (HTML)
        name = escape(product.name or "")
        description = escape(product.description or "")
        category_name = escape(getattr(product.category, "name", "‚Äî") or "‚Äî")
        price_str = (
            f"{product.price:,}".replace(",", " ") + " ‚ÇΩ"
            if product.price
            else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
        )
        contact = escape(product.contact or "")
        date_str = product.created_at.strftime("%d.%m.%Y %H:%M")
        views_count = len(product.views) if getattr(product, "views", None) else 0

        caption = (
            f"<b>üìã {name}</b>\n\n"
            f"üìù {description}\n\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_str}\n"
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
            f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contact}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {date_str}\n"
            f"üë• <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {views_count}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                        callback_data=f"unpublish_{product.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                        callback_data=f"publish_{product.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                        callback_data=f"show_photos_{product.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=f"edit_product_{product.id}",
                    )
                ],
            ]
        )

        if product.photos:
            first_photo_url = product.photos[0].photo_url
            try:
                await message.answer_photo(
                    photo=first_photo_url,
                    caption=caption,
                    reply_markup=actions_keyboard,
                    parse_mode="HTML",
                )
            except TelegramBadRequest:
                await message.answer(
                    caption, reply_markup=actions_keyboard, parse_mode="HTML"
                )
        else:
            await message.answer(
                caption, reply_markup=actions_keyboard, parse_mode="HTML"
            )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = create_pagination_keyboard(current_page, total_count)
    await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º:", reply_markup=keyboard)


def create_pagination_keyboard(
    current_page: int, total_count: int
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []

    if current_page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ads_page_{current_page - 1}"
            )
        )

    nav_buttons.append(
        InlineKeyboardButton(
            text=f"{current_page}/{max(1, (total_count + 4) // 5)}",
            callback_data="current_page",
        )
    )

    if current_page * 5 < total_count:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"ads_page_{current_page + 1}"
            )
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    keyboard.append(
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_ads")]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("ads_page_"))
async def handle_ads_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    page = int(callback.data.split("_")[-1])
    logger.info(
        "Ads pagination: user_id=%s requested page=%s", callback.from_user.id, page
    )

    async with db_helper.session_factory() as session:
        products = await get_user_products_paginated(
            telegram_id=callback.from_user.id, session=session, page=page, limit=5
        )

        total_count = await get_user_products_count(
            telegram_id=callback.from_user.id, session=session
        )

    if not products:
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_page=page, total_count=total_count)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await send_user_products(callback.message, products, page, total_count)
    await callback.answer()


@router.callback_query(F.data == "close_ads")
async def close_ads_view(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç", reply_markup=menu_start)


@router.callback_query(F.data == "current_page")
async def current_page_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")


@router.callback_query(F.data.startswith("unpublish_"))
async def unpublish_product(callback: CallbackQuery):
    """–°–Ω—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (publication=False)."""
    try:
        product_id = int(callback.data.split("_")[-1])
    except ValueError:
        logger.warning(
            "Unpublish: invalid product id in callback data=%s", callback.data
        )
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=False)
        return

    async with db_helper.session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        current_product = await get_user_product_with_photos(
            product_id=product_id, telegram_id=callback.from_user.id, session=session
        )

        if current_product is None:
            logger.warning(
                "Unpublish failed: product not found or not owned. product_id=%s user_id=%s",
                product_id,
                callback.from_user.id,
            )
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            await callback.answer()
            return

        if current_product.publication is False:
            await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            await callback.answer()
            return

        updated = await unpublish_user_product(
            product_id=product_id, telegram_id=callback.from_user.id, session=session
        )

    if updated:
        logger.info(
            "Unpublished product_id=%s by user_id=%s", product_id, callback.from_user.id
        )
        await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚úÖ")
        await callback.answer()
    else:
        logger.warning(
            "Unpublish failed (not owner or already unpublished): product_id=%s user_id=%s",
            product_id,
            callback.from_user.id,
        )
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        await callback.answer()


@router.callback_query(F.data.startswith("publish_"))
async def publish_product(callback: CallbackQuery):
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    try:
        product_id = int(callback.data.split("_")[-1])
    except ValueError:
        logger.warning("Publish: invalid product id in callback data=%s", callback.data)
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=False)
        return

    async with db_helper.session_factory() as session:
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_product = await get_user_product_with_photos(
            product_id=product_id, telegram_id=callback.from_user.id, session=session
        )
        if current_product is None:
            logger.warning(
                "Publish failed: product not found or not owned. product_id=%s user_id=%s",
                product_id,
                callback.from_user.id,
            )
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", show_alert=False)
            return

        if current_product.publication is True:
            await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            await callback.answer()
            return

        product = await publish_user_product(
            product_id=product_id, telegram_id=callback.from_user.id, session=session
        )
        if product is None:
            logger.warning(
                "Publish failed after pre-check: product not found or not owned. product_id=%s user_id=%s",
                product_id,
                callback.from_user.id,
            )
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", show_alert=False)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ (publication=None)
        settings_row = await get_or_create_bot_settings(session)
        if bool(settings_row.moderation) and product.publication is None:
            admins = await get_admin_users(session)
            notify_text = (
                "üîî –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
                f"ID: {product.id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
                f"–¶–µ–Ω–∞: {('–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è' if product.price is None else product.price)}\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )
            for admin in admins:
                try:
                    await callback.bot.send_message(
                        chat_id=admin.telegram_id, text=notify_text
                    )
                except Exception:
                    logger.warning(
                        "Failed to notify admin telegram_id=%s about moderation",
                        admin.telegram_id,
                    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç
    if product.publication is True:
        logger.info("Product published immediately product_id=%s", product.id)
        await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å—Ä–∞–∑—É ‚úÖ")
    elif product.publication is None:
        logger.info("Product sent to moderation product_id=%s", product.id)
        await callback.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚è≥")
    else:
        logger.info("Product publication status updated product_id=%s", product.id)
        await callback.message.answer("–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω")
    await callback.answer()


@router.callback_query(F.data.startswith("show_photos_"))
async def show_product_photos(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π."""
    try:
        product_id = int(callback.data.split("_")[-1])
    except ValueError:
        logger.warning(
            "Show photos: invalid product id in callback data=%s", callback.data
        )
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=False)
        return

    async with db_helper.session_factory() as session:
        product = await get_user_product_with_photos(
            product_id=product_id, telegram_id=callback.from_user.id, session=session
        )

    if product is None:
        logger.warning(
            "Show photos: product not found or not owned product_id=%s user_id=%s",
            product_id,
            callback.from_user.id,
        )
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=False)
        return

    if not product.photos:
        logger.info(
            "Show photos: no photos for product_id=%s (user_id=%s)",
            product_id,
            callback.from_user.id,
        )
        await callback.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=False)
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫—Ä–∞—Å–∏–≤—É—é –ø–æ–¥–ø–∏—Å—å (HTML)
    name = escape(product.name or "")
    description = escape(product.description or "")
    category_name = escape(getattr(product.category, "name", "‚Äî") or "‚Äî")
    price_str = (
        f"{product.price:,}".replace(",", " ") + " ‚ÇΩ" if product.price else "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
    )
    contact = escape(product.contact or "")
    date_str = product.created_at.strftime("%d.%m.%Y %H:%M")
    views_count = len(product.views) if getattr(product, "views", None) else 0

    full_caption = (
        f"<b>üìã {name}</b>\n\n"
        f"üìù {description}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_str}\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contact}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {date_str}\n"
        f"üë• <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {views_count}"
    )

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É (–±–∞—Ç—á–∞–º–∏ –ø–æ 10)
    photo_urls = [p.photo_url for p in product.photos]

    if len(photo_urls) == 1:
        try:
            await callback.message.answer_photo(
                photo=photo_urls[0], caption=full_caption, parse_mode="HTML"
            )
        except TelegramBadRequest:
            await callback.message.answer(full_caption, parse_mode="HTML")
        await callback.answer()
        return

    first_batch = True
    for start in range(0, len(photo_urls), 10):
        chunk = photo_urls[start : start + 10]
        media = []
        for idx, url in enumerate(chunk):
            if first_batch and idx == 0:
                media.append(
                    InputMediaPhoto(media=url, caption=full_caption, parse_mode="HTML")
                )
            else:
                media.append(InputMediaPhoto(media=url))
        try:
            await callback.bot.send_media_group(
                chat_id=callback.message.chat.id, media=media
            )
        except TelegramBadRequest:
            await callback.message.answer(full_caption, parse_mode="HTML")
        first_batch = False

    await callback.answer()


@router.callback_query(F.data.startswith("edit_product_"))
async def start_edit_product(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[-1])
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)
        return

    async with db_helper.session_factory() as session:
        product = await get_user_product_by_id(
            product_id, callback.from_user.id, session
        )
        if not product:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

    await state.update_data(edit_product_id=product_id)
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ** –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=menu_skip,
    )
    await state.set_state(EditProductState.waiting_name)
    await callback.answer()


@router.message(EditProductState.waiting_name)
async def edit_name(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        await state.update_data(new_name=None)
    else:
        await state.update_data(new_name=message.text)
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=menu_skip,
    )
    await state.set_state(EditProductState.waiting_description)


@router.message(EditProductState.waiting_description)
async def edit_description(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(new_description=None)
    else:
        await state.update_data(new_description=message.text)

    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ **–Ω–æ–≤—É—é —Ü–µ–Ω—É** (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è¬ª –Ω–∏–∂–µ:",
        reply_markup=menu_price_negotiable_edit,
    )
    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ü–µ–Ω—É",
        reply_markup=menu_skip,
    )
    await state.set_state(EditProductState.waiting_price)


@router.message(EditProductState.waiting_price)
async def edit_price(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(new_price=None)
    else:
        price_text = message.text.strip().lower()
        if price_text == "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è":
            price = None
        else:
            clean_text = re.sub(r"[ \.\-_]", "", price_text)
            match = re.match(r"(\d+)(–∫*)$", clean_text)
            if not match:
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞:\n"
                    "‚Ä¢ `100–∫` (100 000)\n"
                    "‚Ä¢ `250–∫–∫` (250 000 000)\n"
                    "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üí¨ –î–æ–≥–æ–≤–æ—Ä–Ω–∞—è¬ª –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª."
                )
                return
            number_part = int(match.group(1))
            k_multiplier = 1000 ** len(match.group(2))
            price = number_part * k_multiplier
        await state.update_data(new_price=price)

    await message.answer(
        "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        "‚Äî –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞—è —Å `+7`, `+380` –∏–ª–∏ `+8`)\n"
        "‚Äî Email (–Ω–∞–ø—Ä–∏–º–µ—Ä, `example@mail.com`)\n"
        "‚Äî Telegram username (–Ω–∞—á–∏–Ω–∞—è —Å `@`)\n\n"
        "–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞¬ª –Ω–∏–∂–µ üëá\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.",
        reply_markup=contact,
    )
    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
        reply_markup=menu_skip,
    )
    await state.set_state(EditProductState.waiting_contact)


@router.callback_query(F.data == "price_negotiable_edit")
async def set_price_negotiable_edit(callback: CallbackQuery, state: FSMContext):
    await state.update_data(new_price=None)
    await callback.message.answer(
        "ü§ù –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ **–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è**.\n\n"
        "üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è:\n"
        "‚Äî –¢–µ–ª–µ—Ñ–æ–Ω (`+7`, `+380`, `+8`)\n"
        "‚Äî Email (`example@mail.com`)\n"
        "‚Äî Telegram (`@username`)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞¬ª –Ω–∏–∂–µ üëá",
        reply_markup=contact,
    )
    await state.set_state(EditProductState.waiting_contact)
    await callback.answer()


@router.message(
    EditProductState.waiting_contact,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def edit_contact(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        contact_value = None
    else:
        if message.contact:
            contact_value = message.contact.phone_number
        else:
            raw = message.text.strip()
            cleaned = await clean_phone(raw) if raw.startswith("+") else raw

            if not re.match(CONTACT_REGEX, cleaned):
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
                    "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (`+7`, `+380`, `+8`)\n"
                    "‚Ä¢ Email (`example@mail.com`)\n"
                    "‚Ä¢ Telegram (`@username`)"
                )
                return
            contact_value = cleaned

    user_data = await state.get_data()
    product_id = user_data["edit_product_id"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º kwargs –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏ –ø–æ–ª—è–º–∏, —á—Ç–æ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã
    update_kwargs = {}
    for key in ("new_name", "new_description", "new_price"):
        if user_data.get(key) is not None:
            update_kwargs[key[4:]] = user_data[key]  # —É–±–∏—Ä–∞–µ–º "new_"
    if contact_value is not None:
        update_kwargs["contact"] = contact_value

    if not update_kwargs:
        await message.answer(
            "‚ö†Ô∏è –í—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
            reply_markup=menu_start,
        )
        await state.clear()
        return

    async with db_helper.session_factory() as session:
        updated_product = await update_user_product(
            product_id=product_id,
            telegram_id=message.from_user.id,
            session=session,
            **update_kwargs,
        )

    if updated_product:
        await invalidate_all_ads_cache()
        await message.answer(
            "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –µ–≥–æ —É–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üì¢",
            reply_markup=menu_start,
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=menu_start,
        )

    await state.clear()
