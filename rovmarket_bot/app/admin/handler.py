from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from rovmarket_bot.core.models import db_helper
from rovmarket_bot.core.models.user import User
from .crud import *
from .keyboard import menu_admin, menu_stats, menu_back
from .states import AdCreationStates
from rovmarket_bot.core.cache import invalidate_cache_on_new_ad
from ..search.redis_search import index_product_in_redis

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_text = State()


@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    await state.clear()
    telegram_id = message.from_user.id
    async with db_helper.session_factory() as session:
        is_user_admin = await is_admin(telegram_id, session)
    if is_user_admin:
        await message.answer(
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=menu_admin
        )


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    telegram_id = callback.from_user.id
    async with db_helper.session_factory() as session:
        is_user_admin = await is_admin(telegram_id, session)
    if is_user_admin:
        await callback.message.edit_text(
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=menu_admin
        )


@router.callback_query(F.data == "broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastStates.waiting_for_text)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=menu_back,
    )
    await callback.answer()


@router.message(BroadcastStates.waiting_for_text)
async def send_broadcast(message: Message, state: FSMContext):
    text = message.text
    await state.clear()

    async with db_helper.session_factory() as session:
        users = await get_all_users(session)

    success_count = 0
    for user in users:
        try:
            await message.bot.send_message(
                chat_id=user.telegram_id,
                text=text,
                parse_mode="Markdown",
            )
            success_count += 1
        except Exception as e:
            print(e)
            pass

    await message.answer(
        f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=menu_back,
    )


@router.callback_query(F.data.startswith("all_users"))
async def all_users_paginated(callback: CallbackQuery):
    data_parts = callback.data.split("=")
    try:
        page = int(data_parts[1]) if len(data_parts) > 1 else 1
    except ValueError:
        page = 1

    async with db_helper.session_factory() as session:
        total_users = await get_users_count(session)
        users = await get_users_page(session, page)
        view_counts = await get_users_view_counts(session)

    if not users:
        await callback.message.answer("üôÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return

    lines = [f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\nüîª –°–ø–∏—Å–æ–∫:"]

    for user in users:
        views = view_counts.get(user.id, 0)

        lines.append(
            f"üÜî <b>ID:</b> {user.id}\n"
            f"üë§ <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n"
            f"üîó <b>Username:</b> @{user.username if user.username else '‚Äî'}\n"
            f"üõ°Ô∏è <b>–ê–¥–º–∏–Ω:</b> {'‚úÖ' if user.admin else '‚ùå'}\n"
            f"üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {views}\n"
            f"üïì <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

    text = "\n".join(lines)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE
    keyboard = []

    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"all_users?page={page - 1}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"all_users?page={page + 1}")
        )

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
    await callback.answer()


# –í—ã–≤–æ–¥ –∂–∞–ª–æ–±
@router.callback_query(F.data == "complaints")
async def complaints_list(callback: CallbackQuery):
    async with db_helper.session_factory() as session:
        complaints = await get_all_complaints(session)

    if not complaints:
        await callback.message.answer("‚úÖ –í—Å–µ –∂–∞–ª–æ–±—ã –±—ã–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã. –ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ.")
        await callback.answer()
        return

    total_complaints = len(complaints)
    await callback.message.answer(
        f"üö® <b>–í—Å–µ–≥–æ –∂–∞–ª–æ–±:</b> {total_complaints}\nüóÇ –°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±:", parse_mode="HTML"
    )

    for complaint in complaints:
        user = complaint.user

        text = (
            f"üìù <b>–ñ–∞–ª–æ–±–∞:</b> {complaint.title}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user.username if user.username else '‚Äî'} (ID {user.id})\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {complaint.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

        buttons = [
            [
                InlineKeyboardButton(
                    text=f"‚ùå –ó–∞–∫—Ä—ã—Ç—å –∂–∞–ª–æ–±—É #{complaint.id}",
                    callback_data=f"complaint_close:{complaint.id}",
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.answer(text, parse_mode="HTML", reply_markup=markup)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∂–∞–ª–æ–±—ã
@router.callback_query(F.data.startswith("complaint_close:"))
async def complaint_close(callback: CallbackQuery):
    complaint_id_str = callback.data.split(":")[1]
    try:
        complaint_id = int(complaint_id_str)
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∂–∞–ª–æ–±—ã.", show_alert=True)
        return

    async with db_helper.session_factory() as session:
        await delete_complaint(session, complaint_id)

    await callback.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±
    await complaints_list(callback)


@router.callback_query(F.data.startswith("stats"))
async def stats_handler(callback: CallbackQuery):
    period_map = {
        "week": timedelta(days=7),
        "month": timedelta(days=30),
        "year": timedelta(days=365),
    }

    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data: "stats?period=week"
    period_str = "week"  # –¥–µ—Ñ–æ–ª—Ç
    parts = callback.data.split("=")
    if len(parts) == 2 and parts[1] in period_map:
        period_str = parts[1]

    now = datetime.now(timezone.utc)
    period_start = now - period_map[period_str]

    async with db_helper.session_factory() as session:
        stats = await get_stats_for_period(session, period_start)

        # –ü–æ–ª—É—á–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å top_user_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
        top_user_name = "‚Äî"
        if stats["top_user_id"] is not None:
            user = await session.get(User, stats["top_user_id"])
            if user:
                top_user_name = user.username or f"ID {user.telegram_id}"

    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_str}:*\n\n"
        f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{stats['users_count']}**\n"
        f"üì¢ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: **{stats['products_count']}**\n"
        f"üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º: **{top_user_name}** ‚Äî "
        f"**{stats['top_user_products_count']}** –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
    )

    await callback.message.edit_text(text, reply_markup=menu_stats)
    await callback.answer()


@router.callback_query(F.data == "ads")
async def ads_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AdCreationStates.waiting_for_text)
    await callback.message.answer(
        "üì£ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:",
        reply_markup=menu_back,
    )
    await callback.answer()


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã
@router.message(AdCreationStates.waiting_for_text)
async def ad_text_received(message: Message, state: FSMContext):
    await state.update_data(ad_text=message.text, photos=[])
    await state.set_state(AdCreationStates.waiting_for_photos)
    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\nüì∑ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /done.",
        reply_markup=menu_back,
    )


# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å–±–æ–º–æ–≤)
@router.message(AdCreationStates.waiting_for_photos, F.photo)
async def ad_photos_received(
    message: Message, state: FSMContext, album_messages: list[Message] | None = None
):
    data = await state.get_data()
    photos = data.get("photos", [])

    messages = album_messages if album_messages else [message]

    for msg in messages:
        if len(photos) >= 10:
            await message.answer(
                "üì∏ –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ /done —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.",
                reply_markup=menu_back,
            )
            break
        photo_id = msg.photo[-1].file_id
        photos.append(photo_id)

    await state.update_data(photos=photos)
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/10). –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done",
        reply_markup=menu_back,
    )


# –ö–æ–º–∞–Ω–¥–∞ /done –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
@router.message(AdCreationStates.waiting_for_photos, F.text == "/done")
async def ad_photos_done(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("ad_text")
    photos = data.get("photos", [])

    if not photos:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.",
            reply_markup=menu_back,
        )
        return

    media_group = [
        InputMediaPhoto(
            media=photos[0],
            caption=f"{text}\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /okay –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.\n–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="Markdown",
        ),
    ]
    media_group += [InputMediaPhoto(media=file_id) for file_id in photos]

    await message.answer_media_group(media_group)
    await state.set_state(AdCreationStates.waiting_for_confirmation)


# –ö–æ–º–∞–Ω–¥–∞ /okay ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã
@router.message(AdCreationStates.waiting_for_confirmation, F.text == "/okay")
async def ad_confirmed(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("ad_text")
    photos = data.get("photos", [])

    if not text or not photos:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    async with db_helper.session_factory() as session:
        await create_advertisement(session, text=text, photos_file_ids=photos)

    await message.answer("‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã (–≤ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏ AdCreationStates)
@router.message(
    StateFilter(
        AdCreationStates.waiting_for_text,
        AdCreationStates.waiting_for_photos,
        AdCreationStates.waiting_for_confirmation,
        AdCreationStates.waiting_for_name,
        AdCreationStates.waiting_for_description,
    ),
    F.text == "/cancel",
)
async def ad_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(F.data == "all_ads")
async def show_all_ads(callback: CallbackQuery):
    async with db_helper.session_factory() as session:
        products = await get_unpublished_products(session)

    for product in products:
        first_photo = product.photos[0].photo_url if product.photos else None
        caption = (
            f"<b>{product.name}</b>\n\n"
            f"{product.description}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product.price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {product.contact}"
        )

        buttons = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ",
                        callback_data=f"show_photos:{product.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{product.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{product.id}"
                    ),
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
            ]
        )

        if first_photo:
            await callback.message.answer_photo(
                first_photo, caption=caption, parse_mode="HTML", reply_markup=buttons
            )
        else:
            await callback.message.answer(
                caption, parse_mode="HTML", reply_markup=buttons
            )

    await callback.answer()


@router.callback_query(F.data.startswith("show_photos:"))
async def show_photos(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_product_with_photos_and_user(session, product_id)

    if not product or not product.photos:
        await callback.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    media = [InputMediaPhoto(media=photo.photo_url) for photo in product.photos]
    await callback.message.answer_media_group(media)
    await callback.answer()


@router.callback_query(F.data.startswith("approve:"))
async def approve_ad(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_product_with_photos(session, product_id)

        if not product:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        product.publication = True
        await session.commit()

    await invalidate_cache_on_new_ad()
    await index_product_in_redis(product)

    await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ", show_alert=True)


@router.callback_query(F.data.startswith("decline:"))
async def decline_ad(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_product_with_photos(session, product_id)

        if not product:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        product.publication = False
        await session.commit()

        try:
            await callback.bot.send_message(
                chat_id=product.user.telegram_id,
                text="–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ‚ùå",
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

    await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå", show_alert=True)


@router.callback_query(F.data == "add_categories")
async def start_add_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=menu_back,
    )
    await state.set_state(AdCreationStates.waiting_for_name)


@router.message(AdCreationStates.waiting_for_name)
async def category_name_entered(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdCreationStates.waiting_for_description)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=menu_back,
    )


@router.message(AdCreationStates.waiting_for_description)
async def category_description_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    description = message.text

    async with db_helper.session_factory() as session:
        await create_category(session, name, description)

    await message.answer(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ",
        reply_markup=menu_back,
    )
    await state.clear()
