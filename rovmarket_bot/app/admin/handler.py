import re
from datetime import timedelta, timezone

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from sqlalchemy import or_

from rovmarket_bot.core.models import db_helper
from .crud import *
from .keyboard import menu_admin, menu_stats, menu_back, build_admin_settings_keyboard
from rovmarket_bot.app.settings.crud import (
    get_or_create_bot_settings,
    update_bot_settings,
)
from .states import AdCreationStates
from rovmarket_bot.core.cache import (
    invalidate_cache_on_new_ad,
    invalidate_categories_cache,
)
from rovmarket_bot.app.search.redis_search import index_product_in_redis
from rovmarket_bot.core.config import bot

router = Router()


def format_price(price):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        price_int = int(price)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ç—ã—Å—è—á –∏ –¥–æ–±–∞–≤–ª—è–µ–º ‚ÇΩ
        return f"{price_int:,}".replace(",", " ") + " ‚ÇΩ"
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
        return price


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_text = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞)
class AdsListStates(StatesGroup):
    waiting_for_search = State()


@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    await state.clear()
    telegram_id = message.from_user.id
    async with db_helper.session_factory() as session:
        is_user_admin = await is_admin(telegram_id, session)
    if is_user_admin:
        await message.answer(
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=menu_admin
        )


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    telegram_id = callback.from_user.id
    async with db_helper.session_factory() as session:
        is_user_admin = await is_admin(telegram_id, session)
    if is_user_admin:
        try:
            await callback.message.edit_text(
                "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=menu_admin
            )
        except TelegramBadRequest:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–¥–∏–∞) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=menu_admin
            )
    await callback.answer()


@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: CallbackQuery):
    async with db_helper.session_factory() as session:
        settings_row = await get_or_create_bot_settings(session)
    kb = build_admin_settings_keyboard(
        moderation=bool(settings_row.moderation),
        logging=bool(settings_row.logging),
    )
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == "toggle_moderation")
async def toggle_moderation_handler(callback: CallbackQuery):
    async with db_helper.session_factory() as session:
        current = (await get_or_create_bot_settings(session)).moderation
        updated = await update_bot_settings(session, moderation=not bool(current))
    kb = build_admin_settings_keyboard(
        moderation=bool(updated.moderation), logging=bool(updated.logging)
    )
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", reply_markup=kb)
    await callback.answer(
        "–ú–æ–¥–µ—Ä–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞" if updated.moderation else "–ú–æ–¥–µ—Ä–∞—Ü–∏—è: –≤—ã–∫–ª—é—á–µ–Ω–∞"
    )


@router.callback_query(F.data == "toggle_logging")
async def toggle_logging_handler(callback: CallbackQuery):
    async with db_helper.session_factory() as session:
        current = (await get_or_create_bot_settings(session)).logging
        updated = await update_bot_settings(session, logging=not bool(current))
    kb = build_admin_settings_keyboard(
        moderation=bool(updated.moderation), logging=bool(updated.logging)
    )
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", reply_markup=kb)
    await callback.answer(
        "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤–∫–ª—é—á–µ–Ω–æ" if updated.logging else "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–∫–ª—é—á–µ–Ω–æ"
    )


@router.callback_query(F.data == "broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastStates.waiting_for_text)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=menu_back,
    )
    await callback.answer()


@router.message(
    BroadcastStates.waiting_for_text,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def send_broadcast(message: Message, state: FSMContext):
    text = message.text
    await state.clear()

    async with db_helper.session_factory() as session:
        users = await get_all_users(session)

    success_count = 0
    for user in users:
        try:
            await message.bot.send_message(
                chat_id=user.telegram_id,
                text=text,
                parse_mode="Markdown",
            )
            success_count += 1
        except Exception as e:
            print(e)
            pass

    await message.answer(
        f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=menu_back,
    )


@router.callback_query(F.data.startswith("all_users"))
async def all_users_paginated(callback: CallbackQuery):
    data_parts = callback.data.split("=")
    try:
        page = int(data_parts[1]) if len(data_parts) > 1 else 1
    except ValueError:
        page = 1

    USERS_PER_PAGE = 5  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑

    async with db_helper.session_factory() as session:
        total_users = await get_users_count(session)
        users = await get_users_page(session, page, USERS_PER_PAGE)
        view_counts = await get_users_view_counts(session)

    if not users:
        await callback.message.answer("üôÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if page == 1:
        header = f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\nüîª –°–ø–∏—Å–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
    else:
        header = f"üîª –°–ø–∏—Å–æ–∫ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_message = header
    messages = []

    for user in users:
        views = view_counts.get(user.id, 0)
        user_info = (
            f"üÜî <b>ID:</b> {user.id}\n"
            f"üë§ <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n"
            f"üîó <b>Username:</b> @{user.username if user.username else '‚Äî'}\n"
            f"üõ°Ô∏è <b>–ê–¥–º–∏–Ω:</b> {'‚úÖ' if user.admin else '‚ùå'}\n"
            f"üëÅÔ∏è <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {views}\n"
            f"üïì <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        )

        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
        if len(current_message + user_info) > 4000:
            messages.append(current_message)
            current_message = user_info
        else:
            current_message += user_info

    if current_message:
        messages.append(current_message)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if page < total_pages:
        keyboard.append(
            [
                InlineKeyboardButton(
                    text="‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", callback_data=f"all_users={page + 1}"
                )
            ]
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for i, message_text in enumerate(messages):
        # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = markup if i == len(messages) - 1 else None

        if page == 1 and i == 0:
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await callback.message.edit_text(
                message_text, parse_mode="HTML", reply_markup=reply_markup
            )
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            await callback.message.answer(
                message_text, parse_mode="HTML", reply_markup=reply_markup
            )

    await callback.answer()


# –í—ã–≤–æ–¥ –∂–∞–ª–æ–±
@router.callback_query(F.data == "complaints")
async def complaints_list(callback: CallbackQuery):
    async with db_helper.session_factory() as session:
        complaints = await get_all_complaints(session)

    if not complaints:
        await callback.message.answer("‚úÖ –í—Å–µ –∂–∞–ª–æ–±—ã –±—ã–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã. –ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ.")
        await callback.answer()
        return

    total_complaints = len(complaints)
    await callback.message.answer(
        f"üö® <b>–í—Å–µ–≥–æ –∂–∞–ª–æ–±:</b> {total_complaints}\nüóÇ –°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±:", parse_mode="HTML"
    )

    for complaint in complaints:
        user = complaint.user

        text = (
            f"üìù <b>–ñ–∞–ª–æ–±–∞:</b> {complaint.title}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user.username if user.username else '‚Äî'} (ID {user.id})\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {complaint.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

        buttons = [
            [
                InlineKeyboardButton(
                    text=f"‚ùå –ó–∞–∫—Ä—ã—Ç—å –∂–∞–ª–æ–±—É #{complaint.id}",
                    callback_data=f"complaint_close:{complaint.id}",
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.answer(text, parse_mode="HTML", reply_markup=markup)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∂–∞–ª–æ–±—ã
@router.callback_query(F.data.startswith("complaint_close:"))
async def complaint_close(callback: CallbackQuery):
    complaint_id_str = callback.data.split(":")[1]
    try:
        complaint_id = int(complaint_id_str)
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∂–∞–ª–æ–±—ã.", show_alert=True)
        return

    async with db_helper.session_factory() as session:
        await delete_complaint(session, complaint_id)

    await callback.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±
    await complaints_list(callback)


@router.callback_query(F.data.startswith("stats"))
async def stats_handler(callback: CallbackQuery):
    period_map = {
        "week": timedelta(days=7),
        "month": timedelta(days=30),
        "year": timedelta(days=365),
    }

    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥ –∏–∑ callback_data: "stats?period=week"
    period_str = "week"  # –¥–µ—Ñ–æ–ª—Ç
    parts = callback.data.split("=")
    if len(parts) == 2 and parts[1] in period_map:
        period_str = parts[1]

    now = datetime.now(timezone.utc)
    period_start = now - period_map[period_str]

    async with db_helper.session_factory() as session:
        stats = await get_stats_for_period(session, period_start)

        # –ü–æ–ª—É—á–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å top_user_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
        top_user_name = "‚Äî"
        if stats["top_user_id"] is not None:
            user = await session.get(User, stats["top_user_id"])
            if user:
                top_user_name = user.username or f"ID {user.telegram_id}"

    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_str}:*\n\n"
        f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{stats['users_count']}**\n"
        f"üì¢ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: **{stats['products_count']}**\n"
        f"üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º: **{top_user_name}** ‚Äî "
        f"**{stats['top_user_products_count']}** –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
    )

    await callback.message.edit_text(text, reply_markup=menu_stats)
    await callback.answer()


@router.callback_query(F.data == "ads")
async def ads_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AdCreationStates.waiting_for_text)
    await callback.message.answer(
        "üì£ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:",
        reply_markup=menu_back,
    )
    await callback.answer()


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã
@router.message(
    AdCreationStates.waiting_for_text,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def ad_text_received(message: Message, state: FSMContext):
    await state.update_data(ad_text=message.text, photos=[])
    await state.set_state(AdCreationStates.waiting_for_photos)
    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\nüì∑ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /done.",
        reply_markup=menu_back,
    )


# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å–±–æ–º–æ–≤)
@router.message(
    AdCreationStates.waiting_for_photos,
    F.photo,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def ad_photos_received(
    message: Message, state: FSMContext, album_messages: list[Message] | None = None
):
    data = await state.get_data()
    photos = data.get("photos", [])

    messages = album_messages if album_messages else [message]

    for msg in messages:
        if len(photos) >= 10:
            await message.answer(
                "üì∏ –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ /done —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.",
                reply_markup=menu_back,
            )
            break
        photo_id = msg.photo[-1].file_id
        photos.append(photo_id)

    await state.update_data(photos=photos)
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/10). –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done",
        reply_markup=menu_back,
    )


# –ö–æ–º–∞–Ω–¥–∞ /done –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
@router.message(
    AdCreationStates.waiting_for_photos,
    F.text == "/done",
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def ad_photos_done(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("ad_text")
    photos = data.get("photos", [])

    if not photos:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.",
            reply_markup=menu_back,
        )
        return

    media_group = [
        InputMediaPhoto(
            media=photos[0],
            caption=f"{text}\n\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /okay –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.\n–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="Markdown",
        ),
    ]
    media_group += [InputMediaPhoto(media=file_id) for file_id in photos]

    await message.answer_media_group(media_group)
    await state.set_state(AdCreationStates.waiting_for_confirmation)


# –ö–æ–º–∞–Ω–¥–∞ /okay ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã
@router.message(
    AdCreationStates.waiting_for_confirmation,
    F.text == "/okay",
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def ad_confirmed(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("ad_text")
    photos = data.get("photos", [])

    if not text or not photos:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    async with db_helper.session_factory() as session:
        await create_advertisement(session, text=text, photos_file_ids=photos)

    await message.answer("‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã (–≤ –ª—é–±–æ–π —Å—Ç–∞–¥–∏–∏ AdCreationStates)
@router.message(
    StateFilter(
        AdCreationStates.waiting_for_text,
        AdCreationStates.waiting_for_photos,
        AdCreationStates.waiting_for_confirmation,
        AdCreationStates.waiting_for_name,
        AdCreationStates.waiting_for_description,
    ),
    F.text == "/cancel",
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def ad_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(F.data == "publication")
async def show_publication(callback: CallbackQuery):
    async with db_helper.session_factory() as session:
        products = await get_unpublished_products(session)

    for product in products:
        first_photo = product.photos[0].photo_url if product.photos else None
        caption = (
            f"<b>{product.name}</b>\n\n"
            f"{product.description}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product.price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {product.contact}"
        )

        buttons = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ",
                        callback_data=f"button_show_photos_admin:{product.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{product.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{product.id}"
                    ),
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
            ]
        )

        if first_photo:
            await callback.message.answer_photo(
                first_photo, caption=caption, parse_mode="HTML", reply_markup=buttons
            )
        else:
            await callback.message.answer(
                caption, parse_mode="HTML", reply_markup=buttons
            )

    await callback.answer()


@router.callback_query(F.data.startswith("button_show_photos_admin:"))
async def show_photos_admin(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_product_with_photos_and_user(session, product_id)

    if not product or not product.photos:
        await callback.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    media = [InputMediaPhoto(media=photo.photo_url) for photo in product.photos]
    try:
        await callback.message.answer_media_group(media)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ: {e}", show_alert=True)
        return

    await callback.answer()


@router.callback_query(F.data.startswith("approve:"))
async def approve_ad(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_product_with_photos(session, product_id)

        if not product:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if product.publication:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", show_alert=True)
            return

        product.publication = True
        await session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        users_stmt = select(User).where(
            or_(
                User.notifications_all_ads == True, User.notifications_all_ads.is_(None)
            )
        )
        result = await session.execute(users_stmt)
        subscribed_users = result.scalars().all()

    await invalidate_cache_on_new_ad()
    await index_product_in_redis(product)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

    # –ö–æ–Ω—Ç–∞–∫—Ç
    contact = product.contact.strip() if product.contact else ""
    if (
        re.fullmatch(r"\d{6,}", contact)
        or re.fullmatch(r"[78]\d{6,}", contact)
        or re.fullmatch(r"380\d{6,}", contact)
    ):
        if not contact.startswith("+"):
            contact = "+" + contact
    elif re.match(r"^(8\d{6,}|7\d{6,}|380\d{6,})$", contact):
        contact = "+" + contact

    price = product.price
    if price:
        price = format_price(price)
    else:
        price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"

    geo_text = "-"
    if product.geo and isinstance(product.geo, dict):
        lat = product.geo.get("latitude")
        lon = product.geo.get("longitude")
        if lat is not None and lon is not None:
            geo_text = f"<a href='https://maps.google.com/?q={lat},{lon}'>–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É</a>"

    created_str = product.created_at.strftime("%d.%m.%Y") if product.created_at else "-"

    full_text = (
        f"üìå {product.name}\n"
        f"üí¨ {product.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üí∞ –¶–µ–Ω–∞: {price}\n"
        f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {geo_text}\n"
        f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_str}"
    )

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    photos = [p.photo_url for p in product.photos][:10]

    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º, –∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞
    for user in subscribed_users:
        try:
            if not photos:
                await callback.bot.send_message(
                    user.telegram_id, full_text, parse_mode="HTML"
                )
            elif len(photos) == 1:
                await callback.bot.send_photo(
                    user.telegram_id,
                    photos[0],
                    caption=full_text,
                    parse_mode="HTML",
                )
            else:
                media_group = [
                    InputMediaPhoto(
                        media=photos[0], caption=full_text, parse_mode="HTML"
                    )
                ]
                media_group += [InputMediaPhoto(media=photo) for photo in photos[1:]]
                await callback.bot.send_media_group(user.telegram_id, media_group)
        except Exception as e:
            print(e)

    await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ", show_alert=True)


@router.callback_query(F.data.startswith("decline:"))
async def decline_ad(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_product_with_photos(session, product_id)

        if not product:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        if not product.publication:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", show_alert=True)
            return

        product.publication = False
        await session.commit()

        try:
            await callback.bot.send_message(
                chat_id=product.user.telegram_id,
                text="–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ‚ùå",
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

    await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå", show_alert=True)


@router.callback_query(F.data == "add_categories")
async def start_add_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=menu_back,
    )
    await state.set_state(AdCreationStates.waiting_for_name)


@router.message(
    AdCreationStates.waiting_for_name,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def category_name_entered(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdCreationStates.waiting_for_description)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=menu_back,
    )


@router.message(
    AdCreationStates.waiting_for_description,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def category_description_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    description = message.text

    async with db_helper.session_factory() as session:
        await create_category(session, name, description)

    await message.answer(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ",
        reply_markup=menu_back,
    )
    await invalidate_categories_cache()
    await state.clear()


# ===== –ü—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: —Å–ø–∏—Å–æ–∫, –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –ø–æ–∏—Å–∫, –ø–æ–∫–∞–∑ —Ñ–æ—Ç–æ, —Å–Ω—è—Ç–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ =====


@router.callback_query(F.data.startswith("all_ads"))
async def all_ads_paginated(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdsListStates.waiting_for_search)

    page = 1
    parts = callback.data.split("?")
    if len(parts) == 2 and parts[1].startswith("page="):
        try:
            page = int(parts[1].split("=")[1])
        except ValueError:
            page = 1

    async with db_helper.session_factory() as session:
        total_ads = await get_published_products_count(session)
        products = await get_published_products_page(session, page)

        # –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞–∂–¥—ã–π)
        product_ids = [p.id for p in products]
        if product_ids:
            result = await session.execute(
                select(ProductView.product_id, func.count(ProductView.user_id))
                .where(ProductView.product_id.in_(product_ids))
                .group_by(ProductView.product_id)
            )
            views_counts = dict(result.all())  # {product_id: views_count}
        else:
            views_counts = {}

    header_lines = [
        f"üì¢ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>",
        f"–í—Å–µ–≥–æ: <b>{total_ads}</b>",
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞",
    ]
    header_text = "\n".join(header_lines)

    total_pages = (total_ads + ADS_PER_PAGE - 1) // ADS_PER_PAGE if total_ads else 1
    nav_keyboard = []
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"all_ads?page={page - 1}")
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"all_ads?page={page + 1}")
        )
    if nav_buttons:
        nav_keyboard.append(nav_buttons)
    nav_keyboard.append(
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    )
    nav_markup = InlineKeyboardMarkup(inline_keyboard=nav_keyboard)

    await callback.message.edit_text(
        header_text, parse_mode="HTML", reply_markup=nav_markup
    )

    if not products:
        await callback.message.answer("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        await callback.answer()
        return

    for product in products:
        first_photo = product.photos[0].photo_url if product.photos else None
        views = views_counts.get(product.id, 0)  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–ª str()
        caption = (
            f"<b>#{product.id} ‚Äî {product.name}</b>\n\n"
            f"{product.description}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product.price if product.price is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {product.contact}\n"
            f"<b>–î–∞—Ç–∞:</b> {product.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {views}\n"
        )

        buttons = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ",
                        callback_data=f"show_photos_pub:{product.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üõë –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                        callback_data=f"unpublish:{product.id}",
                    )
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
            ]
        )

        if first_photo:
            await callback.message.answer_photo(
                first_photo, caption=caption, parse_mode="HTML", reply_markup=buttons
            )
        else:
            await callback.message.answer(
                caption, parse_mode="HTML", reply_markup=buttons
            )

    await callback.answer()


@router.callback_query(F.data.startswith("show_photos_pub:"))
async def show_photos_published(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_published_product_by_id(session, product_id)

    if not product or not product.photos:
        await callback.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    if len(product.photos) == 1:
        await callback.message.answer_photo(product.photos[0].photo_url)
    else:
        media = [InputMediaPhoto(media=photo.photo_url) for photo in product.photos]
        await callback.message.answer_media_group(media)
    await callback.answer()


@router.callback_query(F.data.startswith("unpublish:"))
async def unpublish_ad(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    async with db_helper.session_factory() as session:
        product = await get_product_with_photos(session, product_id)
        if not product or product.publication is not True:
            await callback.answer(
                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —Å–Ω—è—Ç–æ", show_alert=True
            )
            return
        # –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        product.publication = False
        await session.commit()

    await callback.answer("–°–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚úÖ", show_alert=True)


@router.message(
    AdsListStates.waiting_for_search,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def ads_search_handler(message: Message, state: FSMContext):
    query = (message.text or "").strip()
    if not query:
        return

    async with db_helper.session_factory() as session:
        products: list[Product] = []

        # –ü–æ–∏—Å–∫ –ø–æ ID, –µ—Å–ª–∏ —á–∏—Å–ª–æ
        if query.isdigit():
            product = await get_published_product_by_id(session, int(query))
            if product:
                products = [product]
        # –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if not products:
            products = await search_published_products_by_name(session, query, limit=10)

    if not products:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return

    for product in products:
        first_photo = product.photos[0].photo_url if product.photos else None
        caption = (
            f"<b>#{product.id} ‚Äî {product.name}</b>\n\n"
            f"{product.description}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product.price if product.price is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {product.contact}\n"
            f"<b>–î–∞—Ç–∞:</b> {product.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )

        buttons = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ",
                        callback_data=f"show_photos_pub:{product.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üõë –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                        callback_data=f"unpublish:{product.id}",
                    )
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")],
            ]
        )

        if first_photo:
            await message.answer_photo(
                first_photo, caption=caption, parse_mode="HTML", reply_markup=buttons
            )
        else:
            await message.answer(caption, parse_mode="HTML", reply_markup=buttons)
