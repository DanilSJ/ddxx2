from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select

from .crud import create_product
from rovmarket_bot.core.cache import (
    get_categories_page_cached as get_categories_page,
    check_rate_limit,
)
from rovmarket_bot.core.models import db_helper, User
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    InputMediaPhoto,
)
from rovmarket_bot.app.start.keyboard import menu_start
from .keyboard import contractual, contact
import re
from rovmarket_bot.core.censorship.bad_words.en import text as bad_words_en
from rovmarket_bot.core.censorship.bad_words.ru import text as bad_words_ru
from rovmarket_bot.app.admin.crud import get_admin_users
from rovmarket_bot.app.settings.crud import get_or_create_bot_settings
from rovmarket_bot.core.logger import get_component_logger

router = Router()
logger = get_component_logger("post")

CONTACT_REGEX = r"^(?:\+7\d{10}|\+380\d{9}|\+8\d{10}|@[\w\d_]{5,32}|[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)$"


def format_price(price):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        price_int = int(price)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ç—ã—Å—è—á –∏ –¥–æ–±–∞–≤–ª—è–µ–º ‚ÇΩ
        return f"{price_int:,}".replace(",", " ") + " ‚ÇΩ"
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
        return price


class Post(StatesGroup):
    categories = State()
    name = State()
    description = State()
    photo = State()
    photos: list = State()
    price = State()
    contact = State()
    geo = State()


async def clean_phone(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    return (
        "+" + re.sub(r"[^\d]", "", text) if "+" in text else re.sub(r"[^\d]", "", text)
    )


ALL_BAD_WORDS = [
    line.strip().lower()
    for line in (bad_words_en + "\n" + bad_words_ru).splitlines()
    if line.strip()
]


def contains_profanity(text: str) -> bool:
    text_lower = text.lower()
    for word in ALL_BAD_WORDS:
        if word in text_lower:
            return True
    return False


async def send_category_page(message_or_callback, state: FSMContext, page: int):
    async with db_helper.session_factory() as session:
        categories = await get_categories_page(session, page=page)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for cat in categories:
            keyboard.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=cat.name, callback_data=f"select_category:{cat.name}"
                    )
                ]
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏ "–≤–ø–µ—Ä–µ–¥"
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}")
            )
        if len(categories) == 10:  # –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page+1}")
            )

        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)

        text = "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)


@router.message(Command("post"))
async def cmd_post(message: Message, state: FSMContext):
    logger.info("/post requested by user_id=%s", message.from_user.id)
    allowed, retry_after = await check_rate_limit(message.from_user.id, "search_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await button_post(message=message, state=state)


@router.message(F.text == "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def button_post(message: Message, state: FSMContext):
    logger.info("User_id=%s started posting flow", message.from_user.id)
    allowed, retry_after = await check_rate_limit(message.from_user.id, "search_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await state.clear()
    await state.set_state(Post.categories)
    await send_category_page(message, state, page=1)


@router.callback_query(F.data.startswith("page:"))
async def paginate_categories(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    logger.info(
        "Post categories pagination user_id=%s page=%s", callback.from_user.id, page
    )
    await send_category_page(callback, state, page=page)
    await callback.answer()


@router.callback_query(F.data.startswith("select_category:"))
async def category_selected(callback: CallbackQuery, state: FSMContext):
    category_name = callback.data.split(":")[1]
    logger.info(
        "Category selected for post user_id=%s category=%s",
        callback.from_user.id,
        category_name,
    )
    await state.update_data(category=category_name)
    await callback.message.edit_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: *{category_name}*")
    await callback.answer()

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(Post.name)


@router.message(
    Post.categories,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_categories(message: Message, state: FSMContext):
    await message.answer(
        "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
    )


@router.message(
    Post.name,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_name(message: Message, state: FSMContext):
    # if contains_profanity(message.text):
    #     logger.warning("Profanity detected in name by user_id=%s", message.from_user.id)
    #     await message.answer(
    #         "üö´ –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–∏—à–∏—Ç–µ –±–µ–∑ –º–∞—Ç–∞."
    #     )
    #     return

    await state.update_data(name=message.text)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–æ–ø–∏—Å–∞–Ω–∏–µ* –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(Post.description)


@router.message(
    Post.description,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_description(message: Message, state: FSMContext):
    # if contains_profanity(message.text):
    #     logger.warning(
    #         "Profanity detected in description by user_id=%s", message.from_user.id
    #     )
    #     await message.answer(
    #         "üö´ –í –æ–ø–∏—Å–∞–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–∏—à–∏—Ç–µ –±–µ–∑ –º–∞—Ç–∞."
    #     )
    #     return

    await state.update_data(description=message.text)
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ *–¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π* –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "üìå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∫–∞–∫ –ø–æ –æ–¥–Ω–æ–º—É, —Ç–∞–∫ –∏ —Å—Ä–∞–∑—É –≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º–∞.\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –∑–∞–ø—Ä–µ—â—ë–Ω –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç 18+, –Ω–∞—Å–∏–ª–∏–µ, –∞–≥—Ä–µ—Å—Å–∏—è, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî —Ç–∞–∫–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è, –∞ –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞—à–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
        "‚úÖ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª"
    )
    await state.update_data(photos=[])
    await state.set_state(Post.photo)


@router.message(
    Post.photo,
    F.photo,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_photo(
    message: Message,
    state: FSMContext,
    album_messages: list[Message] | None = None,  # middleware –ø–µ—Ä–µ–¥–∞—Å—Ç —Å—é–¥–∞ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
):
    data = await state.get_data()
    photos = data.get("photos", [])

    messages = album_messages if album_messages else [message]

    for msg in messages:
        if len(photos) >= 10:
            await message.answer("üì∏ –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª ‚¨áÔ∏è")
            break

        photo_id = msg.photo[-1].file_id
        photos.append(photo_id)

    await state.update_data(photos=photos)
    logger.info(
        "Photos added for user_id=%s count_now=%s", message.from_user.id, len(photos)
    )

    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/10). –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="photos_done"
                    )
                ]
            ]
        ),
    )


@router.message(
    Post.photo,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def photo_other_messages(message: Message):
    await message.answer(
        "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ *–ø–æ –æ–¥–Ω–æ–º—É* —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª ‚úÖ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="photos_done"
                    )
                ]
            ]
        ),
    )


@router.callback_query(lambda c: c.data == "photos_done")
async def photos_done_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await callback.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ", show_alert=True)
        return
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "üí∞ –£–∫–∞–∂–∏—Ç–µ *—Ü–µ–Ω—É* –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\nüí° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å *–¥–æ–≥–æ–≤–æ—Ä–Ω—É—é* —Ü–µ–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=contractual,
    )
    await state.set_state(Post.price)
    await callback.answer()


@router.message(
    Post.price,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_price(message: Message, state: FSMContext):
    price_text = message.text.strip().lower()

    if price_text == "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è":
        price = None
    else:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Ç–æ—á–∫–∏, —Ç–∏—Ä–µ –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
        clean_text = re.sub(r"[ \.\-_]", "", price_text)

        # –§–æ—Ä–º–∞—Ç —Å "–∫", "–∫–∫" –∏ —Ç.–¥.
        match = re.match(r"(\d+)(–∫*)$", clean_text)
        if not match:
            logger.warning(
                "Invalid price format entered by user_id=%s value=%s",
                message.from_user.id,
                message.text,
            )
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞:\n"
                "‚Ä¢ `100–∫` (100 000)\n"
                "‚Ä¢ `250–∫–∫` (250 000 000)\n"
                "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è¬ª."
            )
            return

        number_part = int(match.group(1))
        k_multiplier = 1000 ** len(match.group(2))
        price = number_part * k_multiplier

    await state.update_data(price=price)

    await message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        "‚Äî –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞—è —Å `+7`, `+380` –∏–ª–∏ `+8`)\n"
        "‚Äî Email (–Ω–∞–ø—Ä–∏–º–µ—Ä, `example@mail.com`)\n"
        "‚Äî Telegram username (–Ω–∞—á–∏–Ω–∞—è —Å `@`, –Ω–∞–ø—Ä–∏–º–µ—Ä `@username`)\n\n"
        "–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞¬ª –Ω–∏–∂–µ üëá",
        reply_markup=contact,
    )
    await state.set_state(Post.contact)


@router.callback_query(lambda c: c.data == "price_negotiable")
async def price_negotiable_callback(callback: CallbackQuery, state: FSMContext):
    await state.update_data(price="–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "**ü§ù –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ *–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è*.**\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è:\n"
        "‚Äî –¢–µ–ª–µ—Ñ–æ–Ω (`+7`, `+380`, `+8`)\n"
        "‚Äî Email (`example@mail.com`)\n"
        "‚Äî Telegram (`@username`)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞¬ª –Ω–∏–∂–µ üëá",
        reply_markup=contact,
    )
    await state.set_state(Post.contact)
    await callback.answer()


@router.message(
    Post.contact,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_contact(message: Message, state: FSMContext):
    # ‚úÖ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if message.contact:
        await state.update_data(contact=message.contact.phone_number)

    # ‚úçÔ∏è –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É—é ‚Äî –æ—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    elif message.text:
        raw = message.text.strip()
        cleaned = await clean_phone(raw) if raw.startswith("+") else raw

        if not re.match(CONTACT_REGEX, cleaned):
            logger.warning(
                "Invalid contact by user_id=%s value=%s", message.from_user.id, raw
            )
            await message.answer(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
                "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω (–Ω–∞—á–∏–Ω–∞—è —Å `+7`, `+380` –∏–ª–∏ `+8`, –Ω–∞–ø—Ä–∏–º–µ—Ä `+79591166234`)\n"
                "‚Ä¢ Email (–Ω–∞–ø—Ä–∏–º–µ—Ä, `example@mail.com`)\n"
                "‚Ä¢ Telegram username (–Ω–∞—á–∏–Ω–∞—è —Å `@`, –Ω–∞–ø—Ä–∏–º–µ—Ä `@yourname`)"
            )
            return

        await state.update_data(contact=cleaned)

    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await message.answer(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é *–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é* –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é¬ª üëá",
        reply_markup=keyboard,
    )
    await state.set_state(Post.geo)


@router.message(
    Post.geo,
    F.content_type == ContentType.LOCATION,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_geo_location(message: Message, state: FSMContext):
    location = message.location
    await state.update_data(
        geo={"latitude": location.latitude, "longitude": location.longitude}
    )
    logger.info(
        "Geo set for user_id=%s lat=%s lon=%s",
        message.from_user.id,
        location.latitude,
        location.longitude,
    )
    await finalize_post(message, state)


@router.message(
    Post.geo,
    F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def skip_geo(message: Message, state: FSMContext):
    await state.update_data(geo=None)
    await message.answer("‚è≠ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    logger.info("Geo skipped by user_id=%s", message.from_user.id)
    await finalize_post(message, state)


@router.message(
    Post.geo,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def process_geo_text(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏,
    # –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π.
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ ‚¨áÔ∏è",
        reply_markup=keyboard,
    )


async def finalize_post(message: Message, state: FSMContext):
    data = await state.get_data()
    async with db_helper.session_factory() as session:
        try:
            product = await create_product(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                data=data,
                session=session,
            )
            logger.info(
                "Product created id=%s by user_id=%s", product.id, message.from_user.id
            )

            # --- –§–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç ---
            contact = product.contact.strip() if product.contact else ""
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω
            if (
                re.fullmatch(r"\d{6,}", contact)
                or re.fullmatch(r"[78]\d{6,}", contact)
                or re.fullmatch(r"380\d{6,}", contact)
            ):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª—é—Å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not contact.startswith("+"):
                    contact = "+" + contact
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, 7 –∏–ª–∏ 380 –∏ –±–µ–∑ –ø–ª—é—Å–∞
            elif re.match(r"^(8\d{6,}|7\d{6,}|380\d{6,})$", contact):
                contact = "+" + contact
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω (email –∏–ª–∏ @username) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            product.contact = contact

            # --- –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
            users_stmt = select(User).where(User.notifications_all_ads == True)
            result = await session.execute(users_stmt)
            subscribed_users = result.scalars().all()

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            photos = data.get("photos", [])[:10]
            price = data.get("price")
            if price:
                price = format_price(price)
            else:
                price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"

            geo_text = "-"
            if product.geo and isinstance(product.geo, dict):
                lat = product.geo.get("latitude")
                lon = product.geo.get("longitude")
                if lat is not None and lon is not None:
                    geo_text = f"<a href='https://maps.google.com/?q={lat},{lon}'>–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É</a>"

            created_str = (
                product.created_at.strftime("%d.%m.%Y") if product.created_at else "-"
            )

            full_text = (
                f"üìå {product.name}\n"
                f"üí¨ {product.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"üí∞ –¶–µ–Ω–∞: {price}\n"
                f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
                f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {geo_text}\n"
                f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_str}"
            )

            for user in subscribed_users:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if user.telegram_id == message.from_user.id:
                    continue

                try:
                    if not photos:
                        await message.bot.send_message(
                            user.telegram_id, full_text, parse_mode="HTML"
                        )
                    elif len(photos) == 1:
                        await message.bot.send_photo(
                            user.telegram_id,
                            photos[0],
                            caption=full_text,
                            parse_mode="HTML",
                        )
                    else:
                        media_group = [
                            InputMediaPhoto(
                                media=photos[0], caption=full_text, parse_mode="HTML"
                            )
                        ]
                        media_group += [
                            InputMediaPhoto(media=photo) for photo in photos[1:]
                        ]
                        await message.bot.send_media_group(
                            user.telegram_id, media_group
                        )
                except Exception as e:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
                    )

        except ValueError as e:
            logger.exception(
                "Error creating product for user_id=%s: %s", message.from_user.id, e
            )
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}",
                reply_markup=menu_start,
            )
            return

    await message.answer(
        "üéâ ‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n–û–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.",
        reply_markup=menu_start,
    )

    await state.clear()
