from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from .crud import create_product, get_categories_page
from rovmarket_bot.core.models import db_helper
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

router = Router()


class Post(StatesGroup):
    categories = State()
    name = State()
    description = State()
    photo = State()
    price = State()
    contact = State()
    geo = State()


async def send_category_page(message_or_callback, state: FSMContext, page: int):
    async with db_helper.session_factory() as session:
        categories = await get_categories_page(session, page=page)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for cat in categories:
            keyboard.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=cat.name, callback_data=f"select_category:{cat.name}"
                    )
                ]
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏ "–≤–ø–µ—Ä–µ–¥"
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}")
            )
        if len(categories) == 10:  # –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            nav_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page+1}")
            )

        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)


@router.message(F.text == "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Post.categories)
    await send_category_page(message, state, page=1)


@router.callback_query(F.data.startswith("page:"))
async def paginate_categories(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    await send_category_page(callback, state, page=page)
    await callback.answer()


@router.callback_query(F.data.startswith("select_category:"))
async def category_selected(callback: CallbackQuery, state: FSMContext):
    category_name = callback.data.split(":")[1]
    await state.update_data(category=category_name)
    await callback.message.edit_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category_name}")
    await callback.answer()

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(Post.name)


@router.message(Post.categories)
async def process_categories(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(Post.name)


@router.message(Post.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(Post.description)


@router.message(Post.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3). –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done"
    )
    await state.update_data(photos=[])
    await state.set_state(Post.photo)


@router.message(Post.photo, F.content_type == ContentType.PHOTO)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if len(photos) >= 3:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    photo_id = message.photo[-1].file_id
    print(message.photo)
    print(message.photo[-1])
    photos.append(photo_id)
    await state.update_data(photos=photos)
    await message.answer(
        f"–§–æ—Ç–æ {len(photos)} –ø—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /done"
    )


@router.message(Post.photo, F.text == "/done")
async def done_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await message.answer(
            "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ."
        )
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(Post.price)


@router.message(Post.photo)
async def photo_other_messages(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /done")


@router.message(Post.price)
async def process_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
        return

    await state.update_data(price=int(message.text))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è", callback_data="price_negotiable")]
        ]
    )

    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä–Ω—É—é —Ü–µ–Ω—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=keyboard,
    )
    await state.set_state(Post.contact)


@router.callback_query(lambda c: c.data == "price_negotiable")
async def price_negotiable_callback(callback: CallbackQuery, state: FSMContext):
    await state.update_data(price="–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è —Ü–µ–Ω–∞")
    await callback.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
    await callback.message.answer(
        "–¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, email –∏ —Ç.–ø.):"
    )
    await state.set_state(Post.contact)
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏


@router.message(Post.contact)
async def process_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:", reply_markup=keyboard
    )
    await state.set_state(Post.geo)


@router.message(Post.geo, F.content_type == ContentType.LOCATION)
async def process_geo_location(message: Message, state: FSMContext):
    location = message.location
    await state.update_data(
        geo={"latitude": location.latitude, "longitude": location.longitude}
    )
    await finalize_post(message, state)


@router.message(Post.geo, F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
async def skip_geo(message: Message, state: FSMContext):
    await state.update_data(geo=None)
    await finalize_post(message, state)


@router.message(Post.geo)
async def process_geo_text(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏,
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º.
    await state.update_data(geo=message.text)
    await finalize_post(message, state)


async def finalize_post(message: Message, state: FSMContext):
    data = await state.get_data()
    async with db_helper.session_factory() as session:
        try:
            product = await create_product(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                data=data,
                session=session,
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

    text = (
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n"
        f"–§–æ—Ç–æ: {len(data.get('photos', []))} —à—Ç.\n"
        f"–¶–µ–Ω–∞: {data.get('price')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact')}\n"
        f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {data.get('geo')}\n"
    )
    await message.answer(text)

    await state.clear()
