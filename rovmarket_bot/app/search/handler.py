from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InputMediaPhoto,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from .crud import *
from .keyboard import (
    menu_search,
    pagination_keyboard,
    build_filter_options_keyboard,
    build_filter_pagination_keyboard,
    get_menu_page,
    menu_search_inline,
)
from .redis_search import search_in_redis
from rovmarket_bot.core.models import db_helper
import datetime
from aiogram.types import InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from rovmarket_bot.core.cache import check_rate_limit
from rovmarket_bot.core.logger import get_component_logger
from ..start.handler import cmd_start
from ..start.keyboard import menu_start, menu_ad_inline_write
from rovmarket_bot.app.advertisement.crud import get_next_listings_ad

router = Router()
logger = get_component_logger("search")
PAGE_SIZE = 5


class Search(StatesGroup):
    text = State()
    category = State()
    price_min = State()
    price_max = State()
    complaint = State()


def format_price(price):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        price_int = int(price)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ç—ã—Å—è—á –∏ –¥–æ–±–∞–≤–ª—è–µ–º ‚ÇΩ
        return f"{price_int:,}".replace(",", " ") + " ‚ÇΩ"
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
        return price


@router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext):
    logger.info("/search requested by user_id=%s", message.from_user.id)
    allowed, retry_after = await check_rate_limit(message.from_user.id, "search_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await button_search(message, state)


@router.message(Command("filter"))
async def cmd_filter(message: Message, state: FSMContext):
    logger.info("/filter requested by user_id=%s", message.from_user.id)
    allowed, retry_after = await check_rate_limit(message.from_user.id, "filter_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await send_filter_category_page(message, state, 1)


@router.message(Command("all_ads"))
async def cmd_all_ads(message: Message, state: FSMContext):
    logger.info("/all_ads requested by user_id=%s", message.from_user.id)
    allowed, retry_after = await check_rate_limit(message.from_user.id, "all_ads_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await button_all(message, state)


@router.message(Command("categories"))
async def cmd_categories(message: Message, state: FSMContext):
    logger.info("/categories requested by user_id=%s", message.from_user.id)
    allowed, retry_after = await check_rate_limit(
        message.from_user.id, "categories_cmd"
    )
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await button_categories(message, state)


@router.callback_query(F.data == "menu_start_inline_search_ads")
async def menu_start_inline_search_ads(callback: CallbackQuery, state: FSMContext):
    await button_search(callback.message, state)


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def button_search(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Search.text)

    await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=menu_search,
    )
    await message.answer(
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_search_inline,
    )
    logger.info("Search flow started for user_id=%s", message.from_user.id)


@router.message(F.text == "üì£ –†–µ–∫–ª–∞–º–∞")
async def button_advertisement(message: Message, state: FSMContext):
    await state.clear()
    text = (
        "‚ú® **–†–µ–∫–ª–∞–º–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ** ‚ú®\n\n"
        "üîπ –•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ—ë–º —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ —É—Å–ª—É–≥–µ –Ω–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?\n"
        "üîπ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "üì¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:"
    )
    await message.answer(text, reply_markup=menu_ad_inline_write, parse_mode="Markdown")


@router.callback_query(F.data == "menu_ad_inline_write_callback")
async def menu_ad_inline_write_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    text = (
        "‚ú® <b>–†–µ–∫–ª–∞–º–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ</b> ‚ú®\n\n"
        "üîπ –•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ—ë–º —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ —É—Å–ª—É–≥–µ –Ω–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?\n"
        "üîπ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "üì¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:"
    )
    try:
        await callback.message.answer(
            text, reply_markup=menu_ad_inline_write, parse_mode="HTML"
        )
    except Exception:
        # Fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer("–†–µ–∫–ª–∞–º–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ")
        await callback.message.answer(
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π",
            reply_markup=menu_ad_inline_write,
        )
    await callback.answer()


@router.callback_query(F.data == "menu_search_inline_all_ads")
async def menu_search_inline_all_ads(callback: CallbackQuery, state: FSMContext):
    await button_all(callback.message, state)


@router.callback_query(F.data == "menu_search_inline_filter_ads")
async def menu_search_inline_filter_ads(callback: CallbackQuery, state: FSMContext):
    await button_filters(callback.message, state)


@router.callback_query(F.data == "menu_search_inline_categories_ads")
async def menu_search_inline_categories_ads(callback: CallbackQuery, state: FSMContext):
    await button_categories(callback.message, state)


@router.callback_query(F.data == "menu_search_inline_menu")
async def menu_search_inline_menu(callback: CallbackQuery, state: FSMContext):
    message = callback.message

    await cmd_start(message, state)


@router.message(F.text == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
async def button_all(message: Message, state: FSMContext):
    allowed, retry_after = await check_rate_limit(message.from_user.id, "show_all")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await state.clear()
    await state.set_state(Search.text)
    await state.update_data(page=0)
    await show_ads_page(message, state, 0)
    logger.info("Show all ads page=0 for user_id=%s", message.from_user.id)


@router.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def button_categories(message: Message, state: FSMContext):
    allowed, retry_after = await check_rate_limit(
        message.from_user.id, "categories_btn"
    )
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await state.clear()
    await state.set_state(Search.category)
    await send_category_page(message, state, 1)
    logger.info("Search categories opened for user_id=%s", message.from_user.id)


@router.message(F.text == "üéõ –§–∏–ª—å—Ç—Ä—ã")
async def button_filters(message: Message, state: FSMContext):
    allowed, retry_after = await check_rate_limit(message.from_user.id, "filters_btn")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await state.clear()
    await state.set_state(Search.category)
    await send_filter_category_page(message, state, 1)
    logger.info("Search filters opened for user_id=%s", message.from_user.id)


@router.callback_query(lambda c: c.data and c.data.startswith("page_inline_button:"))
async def paginate_ads_inline(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    await state.update_data(page=page)
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    message = callback.message
    await show_ads_page(message, state, page)
    logger.info("Ads inline pagination user_id=%s page=%s", callback.from_user.id, page)


@router.message(F.text.in_(["‚¨ÖÔ∏è", "‚û°Ô∏è"]))
async def paginate_ads(message: Message, state: FSMContext):
    allowed, retry_after = await check_rate_limit(message.from_user.id, "search_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    data = await state.get_data()
    page = data.get("page", 0)
    if message.text == "‚û°Ô∏è":
        page += 1
    elif message.text == "‚¨ÖÔ∏è" and page > 0:
        page -= 1
    await state.update_data(page=page)
    await show_ads_page(message, state, page)
    logger.info("Ads pagination user_id=%s page=%s", message.from_user.id, page)


async def show_ads_page(message: Message, state: FSMContext, page: int):
    async with db_helper.session_factory() as session:
        cached_data = await get_all_ads_data(session)

        if cached_data:
            product_ids = cached_data["product_ids"]
            products = cached_data["products"]
            photos_map = cached_data["photos"]

            total = len(product_ids)
            start = page * PAGE_SIZE
            end = start + PAGE_SIZE
            page_ids = product_ids[start:end]

            if not page_ids:
                page = max(0, page)
                while True:
                    start = page * PAGE_SIZE
                    end = start + PAGE_SIZE
                    page_ids = product_ids[start:end]

                    if page_ids:
                        break  # –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

                    # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if page > 0:
                        page -= 1
                    else:
                        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                        return

            for idx, pid in enumerate(page_ids, start=1):
                product_data = products.get(str(pid), {})
                name = product_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                desc = product_data.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                if len(desc) > 100:
                    desc = desc[:100] + "..."
                price = product_data.get("price")
                if price:
                    price = format_price(price)
                else:
                    price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
                text = f"üìå {name}\n" f"üí¨ {desc}\n" f"üí∞ –¶–µ–Ω–∞: {price}"
                photos = photos_map.get(pid, [])

                details_markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details:{pid}"
                            ),
                            InlineKeyboardButton(
                                text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complaint:{pid}"
                            ),
                        ]
                    ]
                )
                if photos:
                    await message.answer_photo(
                        photos[0], caption=text, reply_markup=details_markup
                    )
                else:
                    await message.answer(text, reply_markup=details_markup)

                # Insert listings advertisement after every 3rd product
                if idx % 3 == 0:
                    ad = await get_next_listings_ad(session)
                    if ad:
                        ad_text = ad.text
                        try:
                            if getattr(ad, "media", None):
                                from aiogram.types import (
                                    InputMediaPhoto,
                                    InputMediaVideo,
                                )

                                media_group = []
                                for i, m in enumerate(ad.media[:10]):
                                    if m.media_type == "photo":
                                        item = InputMediaPhoto(media=m.file_id)
                                    else:
                                        item = InputMediaVideo(media=m.file_id)
                                    if i == 0:
                                        item.caption = ad_text
                                    media_group.append(item)
                                await message.answer_media_group(media_group)
                            else:
                                await message.answer(ad_text)
                        except Exception:
                            # Fallback to text if media fails
                            await message.answer(ad_text)

            await message.answer(
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {((total-1)//PAGE_SIZE)+1}",
                reply_markup=pagination_keyboard,
            )
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ‚¨ÖÔ∏è‚û°Ô∏è",
                reply_markup=get_menu_page(page),
            )
            await session.commit()
        else:
            await show_ads_page(message, state, 0)
            logger.info(
                "Cache miss, fallback to page=0 for user_id=%s", message.from_user.id
            )


@router.message(
    Search.text,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def search_ads(message: Message, state: FSMContext):
    query = message.text
    logger.info("Search query by user_id=%s: %s", message.from_user.id, query)
    async with db_helper.session_factory() as session:
        results = await search_in_redis(query, session)
    if not results:
        logger.info("No search results for user_id=%s", message.from_user.id)
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
        return
    for item in results:
        name = item.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        desc = item.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
        if len(desc) > 100:
            desc = desc[:100] + "..."
        product_id = item.get("id")
        price = item.get("price")
        if price:
            price = format_price(price)
        else:
            price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
        text = f"üìå {name}\n" f"üí¨ {desc}\n" f"üí∞ {price}"
        photos = item.get("photos", [])

        details_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details:{product_id}"
                    ),
                    InlineKeyboardButton(
                        text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complaint:{product_id}"
                    ),
                ]
            ]
        )
        if photos:
            await message.answer_photo(
                photos[0], caption=text, reply_markup=details_markup
            )
        else:
            await message.answer(text, reply_markup=details_markup)


@router.callback_query(F.data.startswith("details:"))
async def show_details(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        product_id = int(parts[-1])
    except (ValueError, IndexError):
        logger.warning("Details: invalid callback data=%s", callback.data)
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    async with db_helper.session_factory() as session:
        product = await get_product_by_id(product_id, session)

        if not product:
            logger.info("Details: product not found product_id=%s", product_id)
            await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        user_id = await get_user_id_by_telegram_id(callback.from_user.id, session)
        if user_id:
            await add_product_view(product_id, user_id, session)
            logger.info(
                "Recorded product view product_id=%s by user_id=%s",
                product_id,
                user_id,
            )

    name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    desc = product.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

    price = product.get("price")
    if price:
        price = format_price(price)
    else:
        price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
    contact = product.get("contact", "-")

    geo = product.get("geo")
    geo_str = "-"
    geo_link = None
    if geo and isinstance(geo, dict):
        lat = geo.get("latitude")
        lon = geo.get("longitude")
        if lat is not None and lon is not None:
            geo_str = f"{lat}, {lon}"
            geo_link = f"https://maps.google.com/?q={lat},{lon}"

    created_at = product.get("created_at")
    created_str = "-"
    if created_at:
        if isinstance(created_at, str):
            try:
                created_at = datetime.datetime.fromisoformat(created_at)
            except Exception:
                created_at = None
        if isinstance(created_at, datetime.datetime):
            created_str = created_at.strftime("%d.%m.%Y")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    if geo_link:
        geo_text = f"<a href='{geo_link}'>–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É</a>"
    else:
        geo_text = "-"

    contact_text = "–°–≤—è–∑—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞" if contact == "via_bot" else contact

    full_text = (
        f"üìå {name}\n"
        f"üí¨ {desc}\n"
        f"üí∞ –¶–µ–Ω–∞: {price}\n"
        f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_text}\n"
        f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {geo_text}\n"
        f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_str}"
    )

    photos = product.get("photos", [])
    videos = product.get("videos", [])

    await callback.answer()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    details_buttons = [
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data=f"show_photos:{product_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complaint:{product_id}"
            )
        ],
    ]
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —á–∞—Ç–∞

    if contact == "via_bot":
        details_buttons.append(
            [
                InlineKeyboardButton(
                    text="–ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data=f"start_chat:{product_id}"
                )
            ]
        )

    details_markup = InlineKeyboardMarkup(inline_keyboard=details_buttons)
    try:
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å, –∏–Ω–∞—á–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if (
            callback.message.photo
            or callback.message.video
            or callback.message.animation
        ):
            await callback.message.edit_caption(
                caption=full_text, reply_markup=details_markup, parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                full_text, reply_markup=details_markup, parse_mode="HTML"
            )
    except Exception:
        logger.warning(
            "Failed to edit in-place for details product_id=%s, sending new message",
            product_id,
        )
        await callback.message.answer(
            full_text, reply_markup=details_markup, parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("show_photos:"))
async def show_photos(callback: CallbackQuery):
    product_id = int(callback.data.split(":", 1)[1])
    async with db_helper.session_factory() as session:
        product = await get_product_by_id(product_id, session)

    if not product:
        logger.info("Show photos: product not found product_id=%s", product_id)
        await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    desc = product.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
    price = product.get("price")
    if price:
        price = format_price(price)
    else:
        price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
    contact = product.get("contact", "-")

    geo = product.get("geo")
    geo_link = None
    geo_str = "-"
    if geo and isinstance(geo, dict):
        lat = geo.get("latitude")
        lon = geo.get("longitude")
        if lat is not None and lon is not None:
            geo_str = f"{lat}, {lon}"
            geo_link = f"https://maps.google.com/?q={lat},{lon}"

    created_at = product.get("created_at")
    created_str = "-"
    if created_at:
        if isinstance(created_at, str):
            try:
                created_at = datetime.datetime.fromisoformat(created_at)
            except Exception:
                created_at = None
        if isinstance(created_at, datetime.datetime):
            created_str = created_at.strftime("%d.%m.%Y")

    if geo_link:
        geo_text = f"<a href='{geo_link}'>–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É</a>"
    else:
        geo_text = "-"

    contact_text = "–°–≤—è–∑—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞" if contact == "via_bot" else contact

    full_text = (
        f"üìå {name}\n"
        f"üí¨ {desc}\n"
        f"üí∞ –¶–µ–Ω–∞: {price}\n"
        f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_text}\n"
        f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {geo_text}\n"
        f"üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_str}"
    )

    photos = product.get("photos", [])
    videos = product.get("videos", [])
    combo = [("photo", fid) for fid in photos] + [("video", fid) for fid in videos]
    combo = combo[:10]

    if not combo:
        logger.info("Show media: none product_id=%s", product_id)
        await callback.answer("–ú–µ–¥–∏–∞ –Ω–µ—Ç", show_alert=True)
        return
    if len(combo) == 1:
        await callback.answer()
        kind, fid = combo[0]
        if kind == "photo":
            await callback.message.answer_photo(
                fid, caption=full_text, parse_mode="HTML"
            )
        else:
            await callback.message.answer_video(
                fid, caption=full_text, parse_mode="HTML"
            )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É: –ø–µ—Ä–≤–æ–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑
    from aiogram.types import InputMediaPhoto, InputMediaVideo

    media_group = []
    for idx, (kind, fid) in enumerate(combo):
        item = (
            InputMediaPhoto(media=fid)
            if kind == "photo"
            else InputMediaVideo(media=fid)
        )
        if idx == 0:
            item.caption = full_text
            item.parse_mode = "HTML"
        media_group.append(item)

    await callback.answer()
    await callback.message.answer_media_group(media_group)


async def send_category_page(message_or_callback, state: FSMContext, page: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    async with db_helper.session_factory() as session:
        categories = await get_categories_page(session, page=page)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for cat in categories:
            keyboard.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=cat.name, callback_data=f"search_category:{cat.name}"
                    )
                ]
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏ "–≤–ø–µ—Ä–µ–¥"
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_category_page:{page-1}"
                )
            )
        if len(categories) == 10:  # –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"search_category_page:{page+1}"
                )
            )

        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)

        text = "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:"
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)


async def send_filter_category_page(message_or_callback, state: FSMContext, page: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    async with db_helper.session_factory() as session:
        categories = await get_categories_page(session, page=page)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for cat in categories:
            keyboard.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=cat.name, callback_data=f"filter_category:{cat.name}"
                    )
                ]
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –∏ "–≤–ø–µ—Ä–µ–¥"
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"filter_category_page:{page-1}"
                )
            )
        if len(categories) == 10:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"filter_category_page:{page+1}"
                )
            )

        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)

        text = "üß≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:"
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)


async def show_products_by_category(
    message_or_callback, state: FSMContext, category_name: str, page: int
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    async with db_helper.session_factory() as session:
        product_ids = await get_products_by_category(
            session, category_name, page=page, limit=PAGE_SIZE
        )
        total = await get_total_products_by_category(session, category_name)

        if not product_ids:
            text = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                            callback_data="search_back_to_categories",
                        )
                    ]
                ]
            )

            if isinstance(message_or_callback, Message):
                await message_or_callback.answer(text, reply_markup=keyboard)
            else:
                await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        fields_map = await get_fields_for_products(product_ids, session)
        photos_map = await get_photos_for_products(product_ids, session)

        for pid in product_ids:
            fields = fields_map.get(pid, {})
            name = fields.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            desc = fields.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            if len(desc) > 100:
                desc = desc[:100] + "..."
            price = fields.get("price")
            if price:
                price = format_price(price)
            else:
                price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
            text = f"üìå {name}\n" f"üí¨ {desc}\n" f"üí∞ –¶–µ–Ω–∞: {price}"
            photos = photos_map.get(pid, [])

            details_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details:{pid}"
                        ),
                        InlineKeyboardButton(
                            text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complaint:{pid}"
                        ),
                    ]
                ]
            )

            if isinstance(message_or_callback, Message):
                if photos:
                    await message_or_callback.answer_photo(
                        photos[0], caption=text, reply_markup=details_markup
                    )
                else:
                    await message_or_callback.answer(text, reply_markup=details_markup)
            else:
                # –î–ª—è callback_query –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if photos:
                    await message_or_callback.message.answer_photo(
                        photos[0], caption=text, reply_markup=details_markup
                    )
                else:
                    await message_or_callback.message.answer(
                        text, reply_markup=details_markup
                    )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
        nav_buttons = []

        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"search_category_products:{category_name}:{page-1}",
                )
            )

        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –î–∞–ª–µ–µ",
                    callback_data=f"search_category_products:{category_name}:{page+1}",
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        nav_buttons.append(
            InlineKeyboardButton(
                text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_back_to_categories"
            )
        )

        pagination_keyboard = InlineKeyboardMarkup(inline_keyboard=[nav_buttons])

        info_text = (
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages} (–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {total} —Ç–æ–≤–∞—Ä–æ–≤)"
        )

        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(
                info_text, reply_markup=pagination_keyboard
            )
            await message_or_callback.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ‚¨ÖÔ∏è‚û°Ô∏è",
                reply_markup=get_menu_page(page),
            )
        else:
            await message_or_callback.message.answer(
                info_text, reply_markup=pagination_keyboard
            )
            await message_or_callback.message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ‚¨ÖÔ∏è‚û°Ô∏è",
                reply_markup=get_menu_page(page),
            )


async def show_products_by_category_filtered(
    message_or_callback,
    state: FSMContext,
    category_name: str,
    page: int,
    *,
    sort: str | None = None,
    price_min: int | None = None,
    price_max: int | None = None,
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ü–µ–Ω—ã"""
    async with db_helper.session_factory() as session:
        product_ids = await get_products_by_category_filtered(
            session,
            category_name,
            page=page,
            limit=PAGE_SIZE,
            sort=sort,
            price_min=price_min,
            price_max=price_max,
        )
        total = await get_total_products_by_category_filtered(
            session, category_name, price_min=price_min, price_max=price_max
        )

        if not product_ids:
            text = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º."
            keyboard = build_filter_options_keyboard(category_name)
            if isinstance(message_or_callback, Message):
                await message_or_callback.answer(text, reply_markup=keyboard)
            else:
                await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            return

        fields_map = await get_fields_for_products(product_ids, session)
        photos_map = await get_photos_for_products(product_ids, session)

        for pid in product_ids:
            fields = fields_map.get(pid, {})
            name = fields.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            desc = fields.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
            if len(desc) > 100:
                desc = desc[:100] + "..."
            price = fields.get("price")
            if price:
                price = format_price(price)
            else:
                price = "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
            text = f"üìå {name}\n" f"üí¨ {desc}\n" f"üí∞ –¶–µ–Ω–∞: {price}"
            photos = photos_map.get(pid, [])

            details_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details:{pid}"
                        ),
                        InlineKeyboardButton(
                            text="–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"complaint:{pid}"
                        ),
                    ]
                ]
            )
            if isinstance(message_or_callback, Message):
                if photos:
                    await message_or_callback.answer_photo(
                        photos[0], caption=text, reply_markup=details_markup
                    )
                else:
                    await message_or_callback.answer(text, reply_markup=details_markup)
            else:
                if photos:
                    await message_or_callback.message.answer_photo(
                        photos[0], caption=text, reply_markup=details_markup
                    )
                else:
                    await message_or_callback.message.answer(
                        text, reply_markup=details_markup
                    )

        total_pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
        pagination_kb = build_filter_pagination_keyboard(
            category_name,
            page,
            total_pages,
            sort=sort,
            price_min=price_min,
            price_max=price_max,
        )
        info_text = (
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages} (–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {total} —Ç–æ–≤–∞—Ä–æ–≤)"
        )

        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(info_text, reply_markup=pagination_kb)
            await message_or_callback.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ‚¨ÖÔ∏è‚û°Ô∏è",
                reply_markup=get_menu_page(page),
            )
        else:
            await message_or_callback.message.answer(
                info_text, reply_markup=pagination_kb
            )
            await message_or_callback.message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ‚¨ÖÔ∏è‚û°Ô∏è",
                reply_markup=get_menu_page(page),
            )


@router.callback_query(F.data.startswith("complaint:"))
async def start_complaint(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    await state.update_data(complaint_product_id=product_id)
    await state.set_state(Search.complaint)
    await callback.message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É —Ç–µ–∫—Å—Ç–æ–º. –í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:"
    )
    await callback.answer()


@router.message(
    Search.complaint,
    ~F.text.startswith("/"),
    F.text != "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    F.text != "üìã –ú–µ–Ω—é",
    F.text != "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    F.text != "üîô –ù–∞–∑–∞–¥",
    F.text != "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
    F.text != "üéõ –§–∏–ª—å—Ç—Ä—ã",
    F.text != "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    F.text != "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    F.text != "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    F.text != "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    F.text != "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
)
async def receive_complaint_text(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã.")
        return
    data = await state.get_data()
    product_id = data.get("complaint_product_id")
    async with db_helper.session_factory() as session:
        user_id = await get_user_id_by_telegram_id(message.from_user.id, session)
        if not user_id:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∂–∞–ª–æ–±—ã.")
            await state.clear()
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É. –í –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–∏–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
        full_title = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{product_id}: {text}" if product_id else text
        try:
            await create_complaint(user_id=user_id, text=full_title, session=session)
        except Exception:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")
    await state.clear()
    await state.set_state(Search.text)


@router.callback_query(F.data.startswith("search_category:"))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    category_name = callback.data.split(":", 1)[1]
    await state.update_data(selected_category=category_name)
    await show_products_by_category(callback, state, category_name, 1)
    await callback.answer()
    logger.info(
        "Search: category selected by user_id=%s category=%s",
        callback.from_user.id,
        category_name,
    )


@router.callback_query(F.data.startswith("filter_category:"))
async def handle_filter_category_selection(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    category_name = callback.data.split(":", 1)[1]
    await state.update_data(
        selected_category=category_name, sort=None, price_min=None, price_max=None
    )
    keyboard = build_filter_options_keyboard(category_name)
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard
    )
    await callback.answer()
    logger.info(
        "Search: filter category selected by user_id=%s category=%s",
        callback.from_user.id,
        category_name,
    )


@router.callback_query(F.data.startswith("filter_category_page:"))
async def handle_filter_category_pagination(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":", 1)[1])
    await send_filter_category_page(callback, state, page)
    await callback.answer()


@router.callback_query(F.data.startswith("filter_show:"))
async def handle_filter_show(callback: CallbackQuery, state: FSMContext):
    category_name = callback.data.split(":", 1)[1]
    keyboard = build_filter_options_keyboard(category_name)
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("filter_sort:"))
async def handle_filter_sort(callback: CallbackQuery, state: FSMContext):
    # format: filter_sort:<new|old>:<category>
    parts = callback.data.split(":")
    sort_key = parts[1]
    category_name = parts[2]
    await state.update_data(selected_category=category_name, sort=sort_key)
    await show_products_by_category_filtered(
        callback, state, category_name, 1, sort=sort_key
    )
    await callback.answer()


@router.callback_query(F.data.startswith("filter_price:start:"))
async def handle_filter_price_start(callback: CallbackQuery, state: FSMContext):
    category_name = callback.data.split(":", 2)[2]
    await state.update_data(selected_category=category_name)
    await state.set_state(Search.price_min)
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, 0 ‚Äî –±–µ–∑ –º–∏–Ω–∏–º—É–º–∞):"
    )
    await callback.answer()


@router.message(Search.price_min)
async def handle_price_min_input(message: Message, state: FSMContext):
    try:
        value = int(message.text.strip())
        if value < 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ)")
        return
    await state.update_data(price_min=value if value != 0 else None)
    await state.set_state(Search.price_max)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, 0 ‚Äî –±–µ–∑ –º–∞–∫—Å–∏–º—É–º–∞):")


@router.message(Search.price_max)
async def handle_price_max_input(message: Message, state: FSMContext):
    try:
        value = int(message.text.strip())
        if value < 0:
            raise ValueError
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ)")
        return

    data = await state.get_data()
    category_name = data.get("selected_category")
    sort_key = data.get("sort") or "new"
    price_min = data.get("price_min")
    price_max = value if value != 0 else None
    await state.update_data(price_max=price_max)

    await show_products_by_category_filtered(
        message,
        state,
        category_name,
        1,
        sort=sort_key,
        price_min=price_min,
        price_max=price_max,
    )


@router.callback_query(F.data.startswith("search_category_page:"))
async def handle_category_pagination(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    page = int(callback.data.split(":", 1)[1])
    await send_category_page(callback, state, page)
    await callback.answer()


@router.callback_query(F.data.startswith("search_category_products:"))
async def handle_category_products_pagination(
    callback: CallbackQuery, state: FSMContext
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    parts = callback.data.split(":")
    category_name = parts[1]
    page = int(parts[2])
    await show_products_by_category(callback, state, category_name, page)
    await callback.answer()


@router.callback_query(F.data == "search_back_to_categories")
async def handle_back_to_categories(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await send_category_page(callback, state, 1)
    await callback.answer()


@router.callback_query(F.data.startswith("filter_products:"))
async def handle_filter_products_pagination(callback: CallbackQuery, state: FSMContext):
    # format: filter_products:<category>:<page>:<sort or ->:<min or ->:<max or ->
    parts = callback.data.split(":")
    category_name = parts[1]
    page = int(parts[2])
    sort = parts[3] if parts[3] != "-" else None
    price_min = int(parts[4]) if parts[4] != "-" else None
    price_max = int(parts[5]) if parts[5] != "-" else None
    await state.update_data(
        selected_category=category_name,
        sort=sort,
        price_min=price_min,
        price_max=price_max,
    )
    await show_products_by_category_filtered(
        callback,
        state,
        category_name,
        page,
        sort=sort,
        price_min=price_min,
        price_max=price_max,
    )
    await callback.answer()
    logger.info(
        "Search: filter pagination user_id=%s category=%s page=%s sort=%s min=%s max=%s",
        callback.from_user.id,
        category_name,
        page,
        sort,
        price_min,
        price_max,
    )


@router.callback_query(F.data == "filter_back_to_categories")
async def handle_filter_back_to_categories(callback: CallbackQuery, state: FSMContext):
    await send_filter_category_page(callback, state, 1)
    await callback.answer()
