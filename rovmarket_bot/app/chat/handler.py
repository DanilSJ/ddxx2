import time

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
)
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from rovmarket_bot.app.chat.keyboard import menu_chat
from rovmarket_bot.app.start.keyboard import menu_start, menu_start_inline
from rovmarket_bot.core.logger import get_component_logger
from rovmarket_bot.app.chat.crud import (
    create_or_get_chat,
    add_message,
    get_chat_by_id,
    get_user_chats,
    add_video_to_message,
    add_audio_to_message,
    add_voice_to_message,
    add_document_to_message,
    add_photo_to_message,
    get_last_messages,
    add_sticker_to_message,
    mark_chat_as_inactive,
    get_product_name,
    get_telegram_id_by_user_id,
)
from rovmarket_bot.core.models import db_helper, Product, User

router = Router()
logger = get_component_logger("chat")


class ChatState(StatesGroup):
    chatting = State()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ


# –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ chat_id –±—É–¥–µ—Ç –≤ state, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç


@router.message(
    ChatState.chatting,
    ~F.text.startswith("/"),
    F.text.not_in(
        {
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "üìã –ú–µ–Ω—é",
            "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            "üîô –ù–∞–∑–∞–¥",
            "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
            "üéõ –§–∏–ª—å—Ç—Ä—ã",
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
            "üîç –ù–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        }
    ),
)
async def chat(
    message: Message, state: FSMContext, album_messages: list[Message] | None = None
):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    if not chat_id:
        await message.answer(
            "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ."
        )
        return

    last_sent = data.get("last_message_time")
    now = time.time()
    if last_sent and now - last_sent < 3:
        await message.answer(
            "‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        return
    await state.update_data(last_message_time=now)

    messages = album_messages if album_messages else [message]

    async with db_helper.session_factory() as session:
        chat = await get_chat_by_id(session, chat_id)
        if not chat or not chat.is_active:
            await message.answer("‚ùå –ß–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        if message.from_user.id == chat.buyer.telegram_id:
            sender_type = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
            recipient_user = chat.seller
            sender_id = chat.buyer_id
        else:
            sender_type = "–ø—Ä–æ–¥–∞–≤—Ü–∞"
            recipient_user = chat.buyer
            sender_id = chat.seller_id

        recipient_id = recipient_user.telegram_id

        photos, videos, stickers, audios, voices, documents = [], [], [], [], [], []
        full_text = None

        for msg in messages:
            chat_message = await add_message(
                session, chat_id, sender_id, msg.text or ""
            )
            if msg.sticker:
                stickers.append(msg.sticker.file_id)
                await add_sticker_to_message(
                    session, chat_message.id, msg.sticker.file_id
                )
            if msg.audio:
                audios.append(msg.audio.file_id)
                await add_audio_to_message(session, chat_message.id, msg.audio.file_id)
            if msg.voice:
                voices.append(msg.voice.file_id)
                await add_voice_to_message(session, chat_message.id, msg.voice.file_id)
            if msg.document:
                documents.append(msg.document.file_id)
                await add_document_to_message(
                    session, chat_message.id, msg.document.file_id
                )
            if msg.photo:
                largest_photo = msg.photo[-1]
                photos.append(largest_photo.file_id)
                await add_photo_to_message(
                    session, chat_message.id, largest_photo.file_id
                )
            if msg.video:
                videos.append(msg.video.file_id)
                await add_video_to_message(session, chat_message.id, msg.video.file_id)
            if msg.text:
                full_text = msg.text

        try:
            product_name = await get_product_name(session, int(chat.product_id))
            media_group = []

            if full_text:
                full_text = f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name}({chat.buyer_id}):\n\n{full_text}"

            if photos:
                media_group.append(
                    InputMediaPhoto(
                        media=photos[0],
                        caption=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name}({chat.buyer_id}) (—Ñ–æ—Ç–æ)",
                    )
                )
                media_group += [InputMediaPhoto(media=p) for p in photos[1:]]
            if videos:
                media_group.append(
                    InputMediaVideo(
                        media=videos[0],
                        caption=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name}({chat.buyer_id}) (–≤–∏–¥–µ–æ)",
                    )
                )
                media_group += [InputMediaVideo(media=v) for v in videos[1:]]

            if stickers:
                await message.bot.send_message(
                    int(recipient_id),
                    f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name}({chat.buyer_id}) (—Å—Ç–∏–∫–µ—Ä—ã)",
                )
                for st in stickers:
                    await message.bot.send_sticker(int(recipient_id), st)

            for au in audios:
                await message.bot.send_audio(
                    int(recipient_id),
                    au,
                    caption=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name}({chat.buyer_id}) (–∞—É–¥–∏–æ)",
                )

            for vc in voices:
                await message.bot.send_voice(
                    int(recipient_id),
                    vc,
                    caption=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name}({chat.buyer_id}) (–≥–æ–ª–æ—Å–æ–≤–æ–µ)",
                )

            for doc in documents:
                await message.bot.send_document(
                    int(recipient_id),
                    doc,
                    caption=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name}({chat.buyer_id}) (—Ñ–∞–π–ª—ã)",
                )

            if media_group:
                await message.bot.send_media_group(int(recipient_id), media_group)
            elif full_text:
                await message.bot.send_message(int(recipient_id), full_text)

        except TelegramForbiddenError:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç."
            )
            await mark_chat_as_inactive(session, chat_id)
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞). –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç."
            )
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {sender_id}: {e}")
        except Exception as e:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_id}: {e}"
            )

        await message.answer(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.", reply_markup=menu_chat
        )


@router.callback_query(F.data.startswith("start_chat:"))
async def start_anonymous_chat(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    product_id = int(callback.data.split(":")[1])

    async with db_helper.session_factory() as session:
        product = await session.scalar(
            select(Product)
            .options(selectinload(Product.user))
            .where(Product.id == product_id)
        )
        if not product:
            await callback.message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        seller_id = product.user.id  # PK –ø—Ä–æ–¥–∞–≤—Ü–∞
        buyer = await session.scalar(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        if not buyer:
            await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        buyer_id = buyer.id

        if seller_id == buyer_id:
            await callback.message.answer("‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
            return

        chat = await create_or_get_chat(session, product_id, buyer_id, seller_id)
        await state.update_data(chat_id=chat.id)
        await state.set_state(ChatState.chatting)

    product_name = await get_product_name(session, product_id)
    await callback.message.answer(
        f"üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é {product_name} –Ω–∞—á–∞—Ç.\n"
        f"–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å—é–¥–∞, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É."
    )


@router.callback_query(F.data == "exit_for_chat")
async def exit_for_chat(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    chat_messages = data.get("chat_messages", [])  # –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    for msg_id in chat_messages:
        try:
            await callback.message.bot.delete_message(
                chat_id=callback.from_user.id, message_id=msg_id
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await callback.message.answer(
        "üí¨ <b>–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É "
        "/my_chats üìù",
        reply_markup=menu_start,
        parse_mode="HTML",
    )

    await callback.answer()


@router.message(Command("my_chats"))
async def my_chats(message: Message):
    async with db_helper.session_factory() as session:
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ Telegram ID
        user = await session.scalar(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        user_id = user.id  # –∏—Å–ø–æ–ª—å–∑—É–µ–º user.id –∏–∑ –±–∞–∑—ã

        chats = await get_user_chats(session, user_id)

        if not chats:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.",
                reply_markup=menu_start_inline,
            )
            return

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º
        buttons = []
        for index, chat in enumerate(chats, start=1):
            product = await session.get(Product, chat.product_id)
            product_name = product.name if product else f"–¢–æ–≤–∞—Ä #{chat.product_id}"

            # –î–æ–±–∞–≤–ª—è–µ–º buyer_id –≤ —Å–∫–æ–±–∫–∞—Ö
            button_text = f"{index}. {product_name} ({chat.buyer_id})"

            buttons.append(
                [
                    InlineKeyboardButton(
                        text=button_text, callback_data=f"chat_{chat.id}"
                    )
                ]
            )

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("üí¨ –í–∞—à–∏ —á–∞—Ç—ã:", reply_markup=kb)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã", reply_markup=menu_start_inline)


@router.callback_query(F.data.startswith("chat_"))
async def open_chat(callback: CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split("_")[1])

    async with db_helper.session_factory() as session:
        # –î–æ—Å—Ç–∞—ë–º PK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user = await session.scalar(
            select(User).where(User.telegram_id == callback.from_user.id)
        )

        if not user:
            await callback.message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return
        user_id = user.id  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ PK

        chat = await get_chat_by_id(session, chat_id)
        if not chat or not chat.is_active:
            await callback.message.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return

        if user_id not in [chat.buyer.id, chat.seller.id]:
            await callback.message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return

        messages = await get_last_messages(session, chat_id, limit=15)

    await state.update_data(chat_id=chat_id)
    await state.set_state(ChatState.chatting)
    await state.update_data(chat_id=chat_id, chat_messages=[])

    for msg in messages:
        sender = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" if msg["sender_id"] == chat.buyer_id else "–ü—Ä–æ–¥–∞–≤–µ—Ü"
        text = msg["text"]
        media_group = []
        msg_ids = []

        # –§–æ—Ç–æ
        for photo in msg.get("photos", []):
            if photo:
                if text:
                    media_group.append(
                        InputMediaPhoto(media=photo, caption=f"üí¨ {sender}:\n{text}")
                    )
                    text = None
                else:
                    media_group.append(InputMediaPhoto(media=photo))

        # –í–∏–¥–µ–æ
        for video in msg.get("videos", []):
            if video:
                if text:
                    media_group.append(
                        InputMediaVideo(media=video, caption=f"üí¨ {sender}:\n{text}")
                    )
                    text = None
                else:
                    media_group.append(InputMediaVideo(media=video))

        if media_group:
            sent = await callback.message.answer_media_group(media_group)
            msg_ids.extend([m.message_id for m in sent])

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞
        if text:
            sent_msg = await callback.message.answer(f"üí¨ {sender}:\n{text}")
            msg_ids.append(sent_msg.message_id)

        # –°—Ç–∏–∫–µ—Ä—ã
        for st in msg.get("stickers", []):
            if st:
                sent_msg = await callback.message.answer_sticker(st)
                msg_ids.append(sent_msg.message_id)

        # –ê—É–¥–∏–æ
        for au in msg.get("audios", []):
            if au:
                sent_msg = await callback.message.answer_audio(
                    au, caption=f"üí¨ {sender}:"
                )
                msg_ids.append(sent_msg.message_id)

        # –ì–æ–ª–æ—Å–æ–≤—ã–µ
        for vc in msg.get("voices", []):
            if vc:
                sent_msg = await callback.message.answer_voice(
                    vc, caption=f"üí¨ {sender}:"
                )
                msg_ids.append(sent_msg.message_id)

        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        for doc in msg.get("documents", []):
            if doc:
                sent_msg = await callback.message.answer_document(
                    doc, caption=f"üí¨ {sender}:"
                )
                msg_ids.append(sent_msg.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_data = await state.get_data()
        chat_messages = chat_data.get("chat_messages", [])
        chat_messages.extend(msg_ids)
        await state.update_data(chat_messages=chat_messages)

    sent_msg = await callback.message.answer(
        "üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å—é–¥–∞.",
        reply_markup=menu_chat,
    )
    chat_messages = (await state.get_data()).get("chat_messages", [])
    chat_messages.append(sent_msg.message_id)
    await state.update_data(chat_messages=chat_messages)


@router.callback_query(F.data == "menu_start_inline_my_chats")
async def menu_start_inline_my_chats(callback: CallbackQuery, state: FSMContext):
    await my_chats(callback.message)


@router.message(F.text == "üë• –ú–æ–∏ —á–∞—Ç—ã")
async def button_my_chats(message: Message, state: FSMContext):
    await state.clear()
    await my_chats(message)
