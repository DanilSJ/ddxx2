from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)

from rovmarket_bot.app.chat.keyboard import menu_chat
from rovmarket_bot.app.start.keyboard import menu_start
from rovmarket_bot.core.logger import get_component_logger
from rovmarket_bot.app.chat.crud import (
    create_or_get_chat,
    add_message,
    get_chat_by_id,
    get_active_chat_by_user_id,
    get_user_chats, add_photo_to_message,
)
from rovmarket_bot.core.models import db_helper, Product, User

router = Router()
logger = get_component_logger("chat")


class ChatState(StatesGroup):
    chatting = State()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ


# –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ chat_id –±—É–¥–µ—Ç –≤ state, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç


@router.message(ChatState.chatting)
async def chat(
    message: Message, state: FSMContext, album_messages: list[Message] | None = None
):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    if not chat_id:
        await message.answer(
            "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ."
        )
        return

    # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    import time

    last_sent = data.get("last_message_time")
    now = time.time()
    if last_sent and now - last_sent < 3:
        await message.answer(
            "‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        return
    await state.update_data(last_message_time=now)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞–ª—å–±–æ–º
    messages = album_messages if album_messages else [message]

    async with db_helper.session_factory() as session:
        chat = await get_chat_by_id(session, chat_id)
        if not chat or not chat.is_active:
            await message.answer("‚ùå –ß–∞—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if message.from_user.id == chat.buyer_id:
            sender_type = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
            recipient_id = chat.seller_id
        elif message.from_user.id == chat.seller_id:
            sender_type = "–ø—Ä–æ–¥–∞–≤—Ü–∞"
            recipient_id = chat.buyer_id
        else:
            await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç
        photos = []
        full_text = None
        for msg in messages:
            if msg.text and not full_text:
                full_text = msg.text
            if msg.photo:
                largest_photo = msg.photo[-1]  # –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
                photos.append(largest_photo.file_id)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
                chat_message = await add_message(
                    session, chat_id, msg.from_user.id, msg.text or ""
                )
                await add_photo_to_message(
                    session, chat_message.id, largest_photo.file_id
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        try:
            if photos:
                full_text = f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{chat.product_id}"
                media_group = [InputMediaPhoto(media=photos[0], caption=full_text)]
                media_group += [InputMediaPhoto(media=p) for p in photos[1:]]
                await message.bot.send_media_group(int(recipient_id), media_group)

            else:
                await message.bot.send_message(
                    int(recipient_id),
                    f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_type} –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{chat.product_id}:\n\n{full_text}",
                )
        except Exception as e:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}"
            )

        await message.answer(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.", reply_markup=menu_chat
        )


@router.callback_query(F.data.startswith("start_chat:"))
async def start_anonymous_chat(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    product_id = int(callback.data.split(":")[1])

    async with db_helper.session_factory() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        product = await session.get(Product, product_id)
        if not product:
            await callback.message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        seller_id = product.user_id
        buyer_id = callback.from_user.id

        if seller_id == buyer_id:
            await callback.message.answer("‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
            return

        # –î–æ—Å—Ç–∞—ë–º –º–æ–¥–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller: User = await session.get(User, product.user_id)
        seller_telegram_id = seller.telegram_id
        buyer_telegram_id = callback.from_user.id

        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç
        chat = await create_or_get_chat(
            session, product_id, buyer_telegram_id, seller_telegram_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ state
        await state.update_data(chat_id=chat.id)

        # –ó–¥–µ—Å—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ChatState.chatting
        await state.set_state(ChatState.chatting)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
        f"üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{product_id} –Ω–∞—á–∞—Ç.\n"
        f"–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å—é–¥–∞, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É."
    )

    await callback.answer()


@router.callback_query(F.data == "exit_for_chat")
async def exit_for_chat(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "üí¨ <b>–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É "
        "/my_chats üìù",
        reply_markup=menu_start,
        parse_mode="HTML",
    )

    await callback.answer()


@router.message(Command("my_chats"))
async def my_chats(message: Message):
    user_id = message.from_user.id

    async with db_helper.session_factory() as session:
        chats = await get_user_chats(session, user_id)

        if not chats:
            await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤.")
            return

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons = []
        for chat in chats:
            product = await session.get(Product, chat.product_id)
            product_name = product.name if product else f"–¢–æ–≤–∞—Ä #{chat.product_id}"
            buttons.append(
                [
                    InlineKeyboardButton(
                        text=product_name, callback_data=f"chat_{chat.id}"
                    )
                ]
            )
            # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã –±—ã–ª–∞ –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ

        # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer("üí¨ –í–∞—à–∏ —á–∞—Ç—ã:", reply_markup=kb)


@router.callback_query(F.data.startswith("chat_"))
async def open_chat(callback: CallbackQuery, state: FSMContext):
    chat_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    async with db_helper.session_factory() as session:
        chat = await get_chat_by_id(session, chat_id)
        if not chat or not chat.is_active:
            await callback.message.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
            return

        if user_id not in [chat.buyer_id, chat.seller_id]:
            await callback.message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ state –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ChatState.chatting
    await state.update_data(chat_id=chat_id)

    await state.set_state(ChatState.chatting)

    await callback.message.answer(
        "üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å—é–¥–∞.",
        reply_markup=menu_chat,
    )
    await callback.answer()
