from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

from rovmarket_bot.core.models import db_helper
from .crud import create_advertisement, add_ad_photos
from .keyboard import ad_type_keyboard, duration_keyboard, confirm_photos_keyboard
from rovmarket_bot.app.admin.crud import get_all_users

router = Router()


class AdState(StatesGroup):
    choose_type = State()
    text = State()
    photos = State()
    duration = State()


@router.callback_query(F.data == "ads")
async def ads_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(photos=[])
    await callback.message.answer(
        "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∫–ª–∞–º—ã:", reply_markup=ad_type_keyboard
    )
    await state.set_state(AdState.choose_type)


@router.callback_query(F.data.startswith("ad_type:"))
async def choose_ad_type(callback: CallbackQuery, state: FSMContext):
    _, ad_type = callback.data.split(":", 1)
    pinned = ad_type == "broadcast_pinned"
    await state.update_data(ad_type=ad_type, pinned=pinned)

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if ad_type in ("broadcast", "broadcast_pinned"):
        hint = (
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."
        )
    elif ad_type == "menu":
        hint = (
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –º–µ–Ω—é.\n\n"
            "–û–Ω –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –º–µ–Ω—é. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ."
        )
    else:  # listings
        hint = (
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ä–µ–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ."
        )

    await callback.message.edit_reply_markup()
    await callback.message.answer(hint)
    await state.set_state(AdState.text)
    await callback.answer()


@router.message(AdState.text)
async def receive_ad_text(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        return
    await state.update_data(text=message.text.strip(), photos=[])
    await message.answer(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–µ–∫–ª–∞–º—ã (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –∞–ª—å–±–æ–º–æ–º).\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=confirm_photos_keyboard,
    )
    await state.set_state(AdState.photos)


@router.message(AdState.photos, F.photo)
async def receive_ad_photo(
    message: Message,
    state: FSMContext,
    album_messages: list[Message] | None = None,
):
    data = await state.get_data()
    photos: list[str] = data.get("photos", [])

    messages = album_messages if album_messages else [message]
    for msg in messages:
        if len(photos) >= 10:
            await message.answer("üì∏ –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.")
            break
        photos.append(msg.photo[-1].file_id)

    await state.update_data(photos=photos)
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/10). –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'",
        reply_markup=confirm_photos_keyboard,
    )


@router.message(AdState.photos)
async def photos_other_messages(message: Message):
    await message.answer(
        "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.",
        reply_markup=confirm_photos_keyboard,
    )


@router.callback_query(F.data == "ad_photos_done")
async def ad_photos_done(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:", reply_markup=duration_keyboard)
    await state.set_state(AdState.duration)
    await callback.answer()


@router.callback_query(F.data.startswith("ad_duration:"))
async def choose_duration(callback: CallbackQuery, state: FSMContext):
    _, duration = callback.data.split(":", 1)
    data = await state.get_data()
    text: str = data.get("text")
    ad_type: str = data.get("ad_type")
    pinned: bool = bool(data.get("pinned"))
    photos: list[str] = data.get("photos", [])

    async with db_helper.session_factory() as session:
        ad = await create_advertisement(
            session,
            text=text,
            ad_type=ad_type,
            duration=duration,
            pinned=pinned,
        )
        if photos:
            await add_ad_photos(session, advertisement_id=ad.id, file_ids=photos)
        await session.commit()

    # If it's a broadcast type, send to all users
    if ad_type in ("broadcast", "broadcast_pinned"):
        async with db_helper.session_factory() as session:
            users = await get_all_users(session)
        sent = 0
        failed = 0
        for user in users:
            try:
                pinned_required = ad_type == "broadcast_pinned"
                if photos:
                    media = [InputMediaPhoto(media=photos[0], caption=text)]
                    for fid in photos[1:10]:
                        media.append(InputMediaPhoto(media=fid))
                    msgs = await callback.bot.send_media_group(chat_id=user.telegram_id, media=media)
                    if pinned_required and msgs:
                        try:
                            await callback.bot.pin_chat_message(chat_id=user.telegram_id, message_id=msgs[0].message_id)
                        except Exception:
                            pass
                else:
                    msg = await callback.bot.send_message(chat_id=user.telegram_id, text=text)
                    if pinned_required:
                        try:
                            await callback.bot.pin_chat_message(chat_id=user.telegram_id, message_id=msg.message_id)
                        except Exception:
                            pass
                sent += 1
            except Exception:
                failed += 1

        await callback.message.answer(
            f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}."
        )

    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "üéâ –†–µ–∫–ª–∞–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ä–æ–∫—É."
    )
    await state.clear()
    await callback.answer()
