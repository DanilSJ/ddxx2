from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from rovmarket_bot.core.models import db_helper
from .keyboard import menu_start, menu_start_inline
from .crud import add_user
from rovmarket_bot.core.cache import check_rate_limit
from rovmarket_bot.core.logger import get_component_logger
from rovmarket_bot.app.advertisement.crud import get_next_menu_ad
from aiogram.types import InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InputMediaVideo

router = Router()
logger = get_component_logger("start")


def escape_markdown(text: str) -> str:
    """Escape Telegram Markdown special characters.
    This targets classic Markdown (not V2): _, *, `, [, ] and parentheses.
    """
    if not text:
        return text
    # Backslash first
    text = text.replace("\\", "\\\\")
    for ch in ("_", "*", "`", "[", "]", "(", ")"):
        text = text.replace(ch, f"\\{ch}")
    return text


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    logger.info(
        "/start from user_id=%s username=%s",
        message.from_user.id,
        message.from_user.username,
    )
    allowed, retry_after = await check_rate_limit(message.from_user.id, "search_cmd")
    if not allowed:
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    await state.clear()
    async with db_helper.session_factory() as session:
        await add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            session=session,
        )
    logger.info("User ensured in DB user_id=%s", message.from_user.id)

    await message.answer(
        """–ü—Ä–∏–≤–µ—Ç! üëã
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–æ–≤–µ–Ω–ú–∞—Ä–∫–µ—Ç ‚Äî –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –õ–ù–† –ø—Ä—è–º–æ –≤ Telegram.

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
üìå –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤
üõí –ö—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –ª—é–±–æ–π —Ç–æ–≤–∞—Ä
üìç –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –≤ —Å–≤–æ—ë–º —Ä–∞–π–æ–Ω–µ
üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
üí¨ –û–±—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ‚Äî —Ç–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/all_ads ‚Äî –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
/post ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?
–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.
    """,
        parse_mode="Markdown",
        reply_markup=menu_start,
    )
    await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_start_inline)
    
    logger.info("Start menu sent to user_id=%s", message.from_user.id)

    # Show exactly one rotating menu advertisement (if exists)
    async with db_helper.session_factory() as session:
        ad = await get_next_menu_ad(session)
        if ad:
            # Try to send media (photos/videos) if present, else just text
            if getattr(ad, "media", None):
                media_group = []
                for idx, m in enumerate(ad.media[:10]):
                    if m.media_type == "photo":
                        item = InputMediaPhoto(media=m.file_id)
                    else:
                        item = InputMediaVideo(media=m.file_id)
                    if idx == 0:
                        item.caption = escape_markdown(ad.text)
                        item.parse_mode = "Markdown"
                    media_group.append(item)
                try:
                    await message.answer_media_group(media_group)
                except Exception:
                    await message.answer(escape_markdown(ad.text), parse_mode="Markdown")
            else:
                await message.answer(escape_markdown(ad.text), parse_mode="Markdown")
        # persist pointer changes
        await session.commit()
